/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export const uniffi_spark_frost_checksum_func_aggregate_frost: () => number;
export const uniffi_spark_frost_checksum_func_construct_direct_refund_tx: () => number;
export const uniffi_spark_frost_checksum_func_construct_node_tx: () => number;
export const uniffi_spark_frost_checksum_func_construct_refund_tx: () => number;
export const uniffi_spark_frost_checksum_func_construct_split_tx: () => number;
export const uniffi_spark_frost_checksum_func_create_dummy_tx: () => number;
export const uniffi_spark_frost_checksum_func_decrypt_ecies: () => number;
export const uniffi_spark_frost_checksum_func_encrypt_ecies: () => number;
export const uniffi_spark_frost_checksum_func_frost_nonce: () => number;
export const uniffi_spark_frost_checksum_func_get_taproot_pubkey: () => number;
export const uniffi_spark_frost_checksum_func_sign_frost: () => number;
export const uniffi_spark_frost_checksum_func_validate_signature_share: () => number;
export const ffi_spark_frost_uniffi_contract_version: () => number;
export const ffi_spark_frost_rustbuffer_alloc: (a: number, b: bigint, c: number) => void;
export const ffi_spark_frost_rustbuffer_from_bytes: (a: number, b: number, c: number, d: number) => void;
export const ffi_spark_frost_rustbuffer_free: (a: bigint, b: bigint, c: number, d: number, e: number) => void;
export const ffi_spark_frost_rustbuffer_reserve: (a: number, b: bigint, c: bigint, d: number, e: number, f: bigint, g: number) => void;
export const ffi_spark_frost_rust_future_poll_u8: (a: bigint, b: number, c: bigint) => void;
export const ffi_spark_frost_rust_future_cancel_u8: (a: bigint) => void;
export const ffi_spark_frost_rust_future_complete_u8: (a: bigint, b: number) => number;
export const ffi_spark_frost_rust_future_free_u8: (a: bigint) => void;
export const ffi_spark_frost_rust_future_poll_i8: (a: bigint, b: number, c: bigint) => void;
export const ffi_spark_frost_rust_future_cancel_i8: (a: bigint) => void;
export const ffi_spark_frost_rust_future_complete_i8: (a: bigint, b: number) => number;
export const ffi_spark_frost_rust_future_free_i8: (a: bigint) => void;
export const ffi_spark_frost_rust_future_poll_u16: (a: bigint, b: number, c: bigint) => void;
export const ffi_spark_frost_rust_future_cancel_u16: (a: bigint) => void;
export const ffi_spark_frost_rust_future_complete_u16: (a: bigint, b: number) => number;
export const ffi_spark_frost_rust_future_free_u16: (a: bigint) => void;
export const ffi_spark_frost_rust_future_poll_i16: (a: bigint, b: number, c: bigint) => void;
export const ffi_spark_frost_rust_future_cancel_i16: (a: bigint) => void;
export const ffi_spark_frost_rust_future_complete_i16: (a: bigint, b: number) => number;
export const ffi_spark_frost_rust_future_free_i16: (a: bigint) => void;
export const ffi_spark_frost_rust_future_poll_u32: (a: bigint, b: number, c: bigint) => void;
export const ffi_spark_frost_rust_future_cancel_u32: (a: bigint) => void;
export const ffi_spark_frost_rust_future_complete_u32: (a: bigint, b: number) => number;
export const ffi_spark_frost_rust_future_free_u32: (a: bigint) => void;
export const ffi_spark_frost_rust_future_poll_i32: (a: bigint, b: number, c: bigint) => void;
export const ffi_spark_frost_rust_future_cancel_i32: (a: bigint) => void;
export const ffi_spark_frost_rust_future_complete_i32: (a: bigint, b: number) => number;
export const ffi_spark_frost_rust_future_free_i32: (a: bigint) => void;
export const ffi_spark_frost_rust_future_poll_u64: (a: bigint, b: number, c: bigint) => void;
export const ffi_spark_frost_rust_future_cancel_u64: (a: bigint) => void;
export const ffi_spark_frost_rust_future_complete_u64: (a: bigint, b: number) => bigint;
export const ffi_spark_frost_rust_future_free_u64: (a: bigint) => void;
export const ffi_spark_frost_rust_future_poll_i64: (a: bigint, b: number, c: bigint) => void;
export const ffi_spark_frost_rust_future_cancel_i64: (a: bigint) => void;
export const ffi_spark_frost_rust_future_complete_i64: (a: bigint, b: number) => bigint;
export const ffi_spark_frost_rust_future_free_i64: (a: bigint) => void;
export const ffi_spark_frost_rust_future_poll_f32: (a: bigint, b: number, c: bigint) => void;
export const ffi_spark_frost_rust_future_cancel_f32: (a: bigint) => void;
export const ffi_spark_frost_rust_future_complete_f32: (a: bigint, b: number) => number;
export const ffi_spark_frost_rust_future_free_f32: (a: bigint) => void;
export const ffi_spark_frost_rust_future_poll_f64: (a: bigint, b: number, c: bigint) => void;
export const ffi_spark_frost_rust_future_cancel_f64: (a: bigint) => void;
export const ffi_spark_frost_rust_future_complete_f64: (a: bigint, b: number) => number;
export const ffi_spark_frost_rust_future_free_f64: (a: bigint) => void;
export const ffi_spark_frost_rust_future_poll_pointer: (a: bigint, b: number, c: bigint) => void;
export const ffi_spark_frost_rust_future_cancel_pointer: (a: bigint) => void;
export const ffi_spark_frost_rust_future_complete_pointer: (a: bigint, b: number) => number;
export const ffi_spark_frost_rust_future_free_pointer: (a: bigint) => void;
export const ffi_spark_frost_rust_future_poll_rust_buffer: (a: bigint, b: number, c: bigint) => void;
export const ffi_spark_frost_rust_future_cancel_rust_buffer: (a: bigint) => void;
export const ffi_spark_frost_rust_future_complete_rust_buffer: (a: number, b: bigint, c: number) => void;
export const ffi_spark_frost_rust_future_free_rust_buffer: (a: bigint) => void;
export const ffi_spark_frost_rust_future_poll_void: (a: bigint, b: number, c: bigint) => void;
export const ffi_spark_frost_rust_future_cancel_void: (a: bigint) => void;
export const ffi_spark_frost_rust_future_complete_void: (a: bigint, b: number) => void;
export const ffi_spark_frost_rust_future_free_void: (a: bigint) => void;
export const uniffi_spark_frost_fn_func_aggregate_frost: (a: number, b: bigint, c: bigint, d: number, e: number, f: bigint, g: bigint, h: number, i: number, j: bigint, k: bigint, l: number, m: number, n: bigint, o: bigint, p: number, q: number, r: bigint, s: bigint, t: number, u: number, v: bigint, w: bigint, x: number, y: number, z: bigint, a1: bigint, b1: number, c1: number, d1: bigint, e1: bigint, f1: number, g1: number, h1: bigint, i1: bigint, j1: number, k1: number, l1: number) => void;
export const uniffi_spark_frost_fn_func_construct_direct_refund_tx: (a: number, b: bigint, c: bigint, d: number, e: number, f: number, g: bigint, h: bigint, i: number, j: number, k: bigint, l: bigint, m: number, n: number, o: number, p: number) => void;
export const uniffi_spark_frost_fn_func_construct_node_tx: (a: number, b: bigint, c: bigint, d: number, e: number, f: number, g: bigint, h: bigint, i: number, j: number, k: number, l: number) => void;
export const uniffi_spark_frost_fn_func_construct_refund_tx: (a: number, b: bigint, c: bigint, d: number, e: number, f: number, g: bigint, h: bigint, i: number, j: number, k: bigint, l: bigint, m: number, n: number, o: number, p: number) => void;
export const uniffi_spark_frost_fn_func_construct_split_tx: (a: number, b: bigint, c: bigint, d: number, e: number, f: number, g: bigint, h: bigint, i: number, j: number, k: number, l: number) => void;
export const uniffi_spark_frost_fn_func_create_dummy_tx: (a: number, b: bigint, c: bigint, d: number, e: number, f: bigint, g: number) => void;
export const uniffi_spark_frost_fn_func_decrypt_ecies: (a: number, b: bigint, c: bigint, d: number, e: number, f: bigint, g: bigint, h: number, i: number, j: number) => void;
export const uniffi_spark_frost_fn_func_encrypt_ecies: (a: number, b: bigint, c: bigint, d: number, e: number, f: bigint, g: bigint, h: number, i: number, j: number) => void;
export const uniffi_spark_frost_fn_func_frost_nonce: (a: number, b: bigint, c: bigint, d: number, e: number, f: number) => void;
export const uniffi_spark_frost_fn_func_get_taproot_pubkey: (a: number, b: bigint, c: bigint, d: number, e: number, f: number) => void;
export const uniffi_spark_frost_fn_func_sign_frost: (a: number, b: bigint, c: bigint, d: number, e: number, f: bigint, g: bigint, h: number, i: number, j: bigint, k: bigint, l: number, m: number, n: bigint, o: bigint, p: number, q: number, r: bigint, s: bigint, t: number, u: number, v: bigint, w: bigint, x: number, y: number, z: number) => void;
export const uniffi_spark_frost_fn_func_validate_signature_share: (a: bigint, b: bigint, c: number, d: number, e: bigint, f: bigint, g: number, h: number, i: bigint, j: bigint, k: number, l: number, m: bigint, n: bigint, o: number, p: number, q: bigint, r: bigint, s: number, t: number, u: bigint, v: bigint, w: number, x: number, y: number) => number;
export const __wbg_signingnonce_free: (a: number, b: number) => void;
export const __wbg_signingcommitment_free: (a: number, b: number) => void;
export const signingcommitment_new: (a: number, b: number, c: number, d: number) => number;
export const __wbg_nonceresult_free: (a: number, b: number) => void;
export const __wbg_get_nonceresult_nonce: (a: number) => number;
export const __wbg_set_nonceresult_nonce: (a: number, b: number) => void;
export const __wbg_get_nonceresult_commitment: (a: number) => number;
export const __wbg_set_nonceresult_commitment: (a: number, b: number) => void;
export const __wbg_keypackage_free: (a: number, b: number) => void;
export const __wbg_get_keypackage_public_key: (a: number) => [number, number];
export const __wbg_get_keypackage_verifying_key: (a: number) => [number, number];
export const __wbg_set_keypackage_verifying_key: (a: number, b: number, c: number) => void;
export const keypackage_new: (a: number, b: number, c: number, d: number, e: number, f: number) => number;
export const frost_nonce: (a: number) => [number, number, number];
export const wasm_sign_frost: (a: number, b: number, c: number, d: number, e: number, f: any, g: number, h: number) => [number, number, number, number];
export const wasm_aggregate_frost: (a: number, b: number, c: any, d: number, e: any, f: number, g: number, h: any, i: number, j: number, k: number, l: number, m: number, n: number) => [number, number, number, number];
export const __wbg_transactionresult_free: (a: number, b: number) => void;
export const construct_node_tx: (a: number, b: number, c: number, d: number, e: number, f: number) => [number, number, number];
export const construct_refund_tx: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number) => [number, number, number];
export const construct_split_tx: (a: number, b: number, c: number, d: number, e: number, f: number) => [number, number, number];
export const construct_direct_refund_tx: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number) => [number, number, number];
export const __wbg_dummytx_free: (a: number, b: number) => void;
export const __wbg_get_dummytx_tx: (a: number) => [number, number];
export const __wbg_set_dummytx_tx: (a: number, b: number, c: number) => void;
export const __wbg_get_dummytx_txid: (a: number) => [number, number];
export const __wbg_set_dummytx_txid: (a: number, b: number, c: number) => void;
export const create_dummy_tx: (a: number, b: number, c: bigint) => [number, number, number];
export const encrypt_ecies: (a: number, b: number, c: number, d: number) => [number, number, number, number];
export const decrypt_ecies: (a: number, b: number, c: number, d: number) => [number, number, number, number];
export const get_taproot_pubkey: (a: number, b: number) => [number, number, number, number];
export const __wbg_set_signingnonce_hiding: (a: number, b: number, c: number) => void;
export const __wbg_set_signingnonce_binding: (a: number, b: number, c: number) => void;
export const __wbg_set_signingcommitment_hiding: (a: number, b: number, c: number) => void;
export const __wbg_set_signingcommitment_binding: (a: number, b: number, c: number) => void;
export const __wbg_set_transactionresult_tx: (a: number, b: number, c: number) => void;
export const __wbg_set_transactionresult_sighash: (a: number, b: number, c: number) => void;
export const __wbg_set_keypackage_secret_key: (a: number, b: number, c: number) => void;
export const __wbg_set_keypackage_public_key: (a: number, b: number, c: number) => void;
export const __wbg_get_signingnonce_hiding: (a: number) => [number, number];
export const __wbg_get_signingnonce_binding: (a: number) => [number, number];
export const __wbg_get_signingcommitment_hiding: (a: number) => [number, number];
export const __wbg_get_signingcommitment_binding: (a: number) => [number, number];
export const __wbg_get_transactionresult_tx: (a: number) => [number, number];
export const __wbg_get_transactionresult_sighash: (a: number) => [number, number];
export const __wbg_get_keypackage_secret_key: (a: number) => [number, number];
export const signingnonce_new: (a: number, b: number, c: number, d: number) => number;
export const rustsecp256k1_v0_10_0_context_create: (a: number) => number;
export const rustsecp256k1_v0_10_0_context_destroy: (a: number) => void;
export const rustsecp256k1_v0_10_0_default_illegal_callback_fn: (a: number, b: number) => void;
export const rustsecp256k1_v0_10_0_default_error_callback_fn: (a: number, b: number) => void;
export const __wbindgen_malloc: (a: number, b: number) => number;
export const __wbindgen_realloc: (a: number, b: number, c: number, d: number) => number;
export const __wbindgen_exn_store: (a: number) => void;
export const __externref_table_alloc: () => number;
export const __wbindgen_export_4: WebAssembly.Table;
export const __wbindgen_free: (a: number, b: number, c: number) => void;
export const __externref_table_dealloc: (a: number) => void;
export const __wbindgen_start: () => void;
