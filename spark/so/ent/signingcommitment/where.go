// Code generated by ent, DO NOT EDIT.

package signingcommitment

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/lightsparkdev/spark/so/ent/predicate"
	"github.com/lightsparkdev/spark/so/ent/schema/schematype"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.SigningCommitment {
	return predicate.SigningCommitment(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.SigningCommitment {
	return predicate.SigningCommitment(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.SigningCommitment {
	return predicate.SigningCommitment(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.SigningCommitment {
	return predicate.SigningCommitment(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.SigningCommitment {
	return predicate.SigningCommitment(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.SigningCommitment {
	return predicate.SigningCommitment(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.SigningCommitment {
	return predicate.SigningCommitment(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.SigningCommitment {
	return predicate.SigningCommitment(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.SigningCommitment {
	return predicate.SigningCommitment(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.SigningCommitment {
	return predicate.SigningCommitment(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.SigningCommitment {
	return predicate.SigningCommitment(sql.FieldEQ(FieldUpdateTime, v))
}

// OperatorIndex applies equality check predicate on the "operator_index" field. It's identical to OperatorIndexEQ.
func OperatorIndex(v uint) predicate.SigningCommitment {
	return predicate.SigningCommitment(sql.FieldEQ(FieldOperatorIndex, v))
}

// NonceCommitment applies equality check predicate on the "nonce_commitment" field. It's identical to NonceCommitmentEQ.
func NonceCommitment(v []byte) predicate.SigningCommitment {
	return predicate.SigningCommitment(sql.FieldEQ(FieldNonceCommitment, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.SigningCommitment {
	return predicate.SigningCommitment(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.SigningCommitment {
	return predicate.SigningCommitment(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.SigningCommitment {
	return predicate.SigningCommitment(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.SigningCommitment {
	return predicate.SigningCommitment(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.SigningCommitment {
	return predicate.SigningCommitment(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.SigningCommitment {
	return predicate.SigningCommitment(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.SigningCommitment {
	return predicate.SigningCommitment(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.SigningCommitment {
	return predicate.SigningCommitment(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.SigningCommitment {
	return predicate.SigningCommitment(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.SigningCommitment {
	return predicate.SigningCommitment(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.SigningCommitment {
	return predicate.SigningCommitment(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.SigningCommitment {
	return predicate.SigningCommitment(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.SigningCommitment {
	return predicate.SigningCommitment(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.SigningCommitment {
	return predicate.SigningCommitment(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.SigningCommitment {
	return predicate.SigningCommitment(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.SigningCommitment {
	return predicate.SigningCommitment(sql.FieldLTE(FieldUpdateTime, v))
}

// OperatorIndexEQ applies the EQ predicate on the "operator_index" field.
func OperatorIndexEQ(v uint) predicate.SigningCommitment {
	return predicate.SigningCommitment(sql.FieldEQ(FieldOperatorIndex, v))
}

// OperatorIndexNEQ applies the NEQ predicate on the "operator_index" field.
func OperatorIndexNEQ(v uint) predicate.SigningCommitment {
	return predicate.SigningCommitment(sql.FieldNEQ(FieldOperatorIndex, v))
}

// OperatorIndexIn applies the In predicate on the "operator_index" field.
func OperatorIndexIn(vs ...uint) predicate.SigningCommitment {
	return predicate.SigningCommitment(sql.FieldIn(FieldOperatorIndex, vs...))
}

// OperatorIndexNotIn applies the NotIn predicate on the "operator_index" field.
func OperatorIndexNotIn(vs ...uint) predicate.SigningCommitment {
	return predicate.SigningCommitment(sql.FieldNotIn(FieldOperatorIndex, vs...))
}

// OperatorIndexGT applies the GT predicate on the "operator_index" field.
func OperatorIndexGT(v uint) predicate.SigningCommitment {
	return predicate.SigningCommitment(sql.FieldGT(FieldOperatorIndex, v))
}

// OperatorIndexGTE applies the GTE predicate on the "operator_index" field.
func OperatorIndexGTE(v uint) predicate.SigningCommitment {
	return predicate.SigningCommitment(sql.FieldGTE(FieldOperatorIndex, v))
}

// OperatorIndexLT applies the LT predicate on the "operator_index" field.
func OperatorIndexLT(v uint) predicate.SigningCommitment {
	return predicate.SigningCommitment(sql.FieldLT(FieldOperatorIndex, v))
}

// OperatorIndexLTE applies the LTE predicate on the "operator_index" field.
func OperatorIndexLTE(v uint) predicate.SigningCommitment {
	return predicate.SigningCommitment(sql.FieldLTE(FieldOperatorIndex, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v schematype.SigningCommitmentStatus) predicate.SigningCommitment {
	vc := v
	return predicate.SigningCommitment(sql.FieldEQ(FieldStatus, vc))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v schematype.SigningCommitmentStatus) predicate.SigningCommitment {
	vc := v
	return predicate.SigningCommitment(sql.FieldNEQ(FieldStatus, vc))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...schematype.SigningCommitmentStatus) predicate.SigningCommitment {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SigningCommitment(sql.FieldIn(FieldStatus, v...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...schematype.SigningCommitmentStatus) predicate.SigningCommitment {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SigningCommitment(sql.FieldNotIn(FieldStatus, v...))
}

// NonceCommitmentEQ applies the EQ predicate on the "nonce_commitment" field.
func NonceCommitmentEQ(v []byte) predicate.SigningCommitment {
	return predicate.SigningCommitment(sql.FieldEQ(FieldNonceCommitment, v))
}

// NonceCommitmentNEQ applies the NEQ predicate on the "nonce_commitment" field.
func NonceCommitmentNEQ(v []byte) predicate.SigningCommitment {
	return predicate.SigningCommitment(sql.FieldNEQ(FieldNonceCommitment, v))
}

// NonceCommitmentIn applies the In predicate on the "nonce_commitment" field.
func NonceCommitmentIn(vs ...[]byte) predicate.SigningCommitment {
	return predicate.SigningCommitment(sql.FieldIn(FieldNonceCommitment, vs...))
}

// NonceCommitmentNotIn applies the NotIn predicate on the "nonce_commitment" field.
func NonceCommitmentNotIn(vs ...[]byte) predicate.SigningCommitment {
	return predicate.SigningCommitment(sql.FieldNotIn(FieldNonceCommitment, vs...))
}

// NonceCommitmentGT applies the GT predicate on the "nonce_commitment" field.
func NonceCommitmentGT(v []byte) predicate.SigningCommitment {
	return predicate.SigningCommitment(sql.FieldGT(FieldNonceCommitment, v))
}

// NonceCommitmentGTE applies the GTE predicate on the "nonce_commitment" field.
func NonceCommitmentGTE(v []byte) predicate.SigningCommitment {
	return predicate.SigningCommitment(sql.FieldGTE(FieldNonceCommitment, v))
}

// NonceCommitmentLT applies the LT predicate on the "nonce_commitment" field.
func NonceCommitmentLT(v []byte) predicate.SigningCommitment {
	return predicate.SigningCommitment(sql.FieldLT(FieldNonceCommitment, v))
}

// NonceCommitmentLTE applies the LTE predicate on the "nonce_commitment" field.
func NonceCommitmentLTE(v []byte) predicate.SigningCommitment {
	return predicate.SigningCommitment(sql.FieldLTE(FieldNonceCommitment, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SigningCommitment) predicate.SigningCommitment {
	return predicate.SigningCommitment(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SigningCommitment) predicate.SigningCommitment {
	return predicate.SigningCommitment(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SigningCommitment) predicate.SigningCommitment {
	return predicate.SigningCommitment(sql.NotPredicates(p))
}
