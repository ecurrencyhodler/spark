// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/lightsparkdev/spark/so/ent/predicate"
	"github.com/lightsparkdev/spark/so/ent/transfer"
	"github.com/lightsparkdev/spark/so/ent/utxo"
	"github.com/lightsparkdev/spark/so/ent/utxoswap"
)

// UtxoSwapQuery is the builder for querying UtxoSwap entities.
type UtxoSwapQuery struct {
	config
	ctx          *QueryContext
	order        []utxoswap.OrderOption
	inters       []Interceptor
	predicates   []predicate.UtxoSwap
	withUtxo     *UtxoQuery
	withTransfer *TransferQuery
	withFKs      bool
	modifiers    []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the UtxoSwapQuery builder.
func (usq *UtxoSwapQuery) Where(ps ...predicate.UtxoSwap) *UtxoSwapQuery {
	usq.predicates = append(usq.predicates, ps...)
	return usq
}

// Limit the number of records to be returned by this query.
func (usq *UtxoSwapQuery) Limit(limit int) *UtxoSwapQuery {
	usq.ctx.Limit = &limit
	return usq
}

// Offset to start from.
func (usq *UtxoSwapQuery) Offset(offset int) *UtxoSwapQuery {
	usq.ctx.Offset = &offset
	return usq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (usq *UtxoSwapQuery) Unique(unique bool) *UtxoSwapQuery {
	usq.ctx.Unique = &unique
	return usq
}

// Order specifies how the records should be ordered.
func (usq *UtxoSwapQuery) Order(o ...utxoswap.OrderOption) *UtxoSwapQuery {
	usq.order = append(usq.order, o...)
	return usq
}

// QueryUtxo chains the current query on the "utxo" edge.
func (usq *UtxoSwapQuery) QueryUtxo() *UtxoQuery {
	query := (&UtxoClient{config: usq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := usq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := usq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(utxoswap.Table, utxoswap.FieldID, selector),
			sqlgraph.To(utxo.Table, utxo.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, utxoswap.UtxoTable, utxoswap.UtxoColumn),
		)
		fromU = sqlgraph.SetNeighbors(usq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTransfer chains the current query on the "transfer" edge.
func (usq *UtxoSwapQuery) QueryTransfer() *TransferQuery {
	query := (&TransferClient{config: usq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := usq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := usq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(utxoswap.Table, utxoswap.FieldID, selector),
			sqlgraph.To(transfer.Table, transfer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, utxoswap.TransferTable, utxoswap.TransferColumn),
		)
		fromU = sqlgraph.SetNeighbors(usq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first UtxoSwap entity from the query.
// Returns a *NotFoundError when no UtxoSwap was found.
func (usq *UtxoSwapQuery) First(ctx context.Context) (*UtxoSwap, error) {
	nodes, err := usq.Limit(1).All(setContextOp(ctx, usq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{utxoswap.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (usq *UtxoSwapQuery) FirstX(ctx context.Context) *UtxoSwap {
	node, err := usq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first UtxoSwap ID from the query.
// Returns a *NotFoundError when no UtxoSwap ID was found.
func (usq *UtxoSwapQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = usq.Limit(1).IDs(setContextOp(ctx, usq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{utxoswap.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (usq *UtxoSwapQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := usq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single UtxoSwap entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one UtxoSwap entity is found.
// Returns a *NotFoundError when no UtxoSwap entities are found.
func (usq *UtxoSwapQuery) Only(ctx context.Context) (*UtxoSwap, error) {
	nodes, err := usq.Limit(2).All(setContextOp(ctx, usq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{utxoswap.Label}
	default:
		return nil, &NotSingularError{utxoswap.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (usq *UtxoSwapQuery) OnlyX(ctx context.Context) *UtxoSwap {
	node, err := usq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only UtxoSwap ID in the query.
// Returns a *NotSingularError when more than one UtxoSwap ID is found.
// Returns a *NotFoundError when no entities are found.
func (usq *UtxoSwapQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = usq.Limit(2).IDs(setContextOp(ctx, usq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{utxoswap.Label}
	default:
		err = &NotSingularError{utxoswap.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (usq *UtxoSwapQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := usq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of UtxoSwaps.
func (usq *UtxoSwapQuery) All(ctx context.Context) ([]*UtxoSwap, error) {
	ctx = setContextOp(ctx, usq.ctx, ent.OpQueryAll)
	if err := usq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*UtxoSwap, *UtxoSwapQuery]()
	return withInterceptors[[]*UtxoSwap](ctx, usq, qr, usq.inters)
}

// AllX is like All, but panics if an error occurs.
func (usq *UtxoSwapQuery) AllX(ctx context.Context) []*UtxoSwap {
	nodes, err := usq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of UtxoSwap IDs.
func (usq *UtxoSwapQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if usq.ctx.Unique == nil && usq.path != nil {
		usq.Unique(true)
	}
	ctx = setContextOp(ctx, usq.ctx, ent.OpQueryIDs)
	if err = usq.Select(utxoswap.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (usq *UtxoSwapQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := usq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (usq *UtxoSwapQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, usq.ctx, ent.OpQueryCount)
	if err := usq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, usq, querierCount[*UtxoSwapQuery](), usq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (usq *UtxoSwapQuery) CountX(ctx context.Context) int {
	count, err := usq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (usq *UtxoSwapQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, usq.ctx, ent.OpQueryExist)
	switch _, err := usq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (usq *UtxoSwapQuery) ExistX(ctx context.Context) bool {
	exist, err := usq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the UtxoSwapQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (usq *UtxoSwapQuery) Clone() *UtxoSwapQuery {
	if usq == nil {
		return nil
	}
	return &UtxoSwapQuery{
		config:       usq.config,
		ctx:          usq.ctx.Clone(),
		order:        append([]utxoswap.OrderOption{}, usq.order...),
		inters:       append([]Interceptor{}, usq.inters...),
		predicates:   append([]predicate.UtxoSwap{}, usq.predicates...),
		withUtxo:     usq.withUtxo.Clone(),
		withTransfer: usq.withTransfer.Clone(),
		// clone intermediate query.
		sql:  usq.sql.Clone(),
		path: usq.path,
	}
}

// WithUtxo tells the query-builder to eager-load the nodes that are connected to
// the "utxo" edge. The optional arguments are used to configure the query builder of the edge.
func (usq *UtxoSwapQuery) WithUtxo(opts ...func(*UtxoQuery)) *UtxoSwapQuery {
	query := (&UtxoClient{config: usq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	usq.withUtxo = query
	return usq
}

// WithTransfer tells the query-builder to eager-load the nodes that are connected to
// the "transfer" edge. The optional arguments are used to configure the query builder of the edge.
func (usq *UtxoSwapQuery) WithTransfer(opts ...func(*TransferQuery)) *UtxoSwapQuery {
	query := (&TransferClient{config: usq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	usq.withTransfer = query
	return usq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.UtxoSwap.Query().
//		GroupBy(utxoswap.FieldCreateTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (usq *UtxoSwapQuery) GroupBy(field string, fields ...string) *UtxoSwapGroupBy {
	usq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &UtxoSwapGroupBy{build: usq}
	grbuild.flds = &usq.ctx.Fields
	grbuild.label = utxoswap.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.UtxoSwap.Query().
//		Select(utxoswap.FieldCreateTime).
//		Scan(ctx, &v)
func (usq *UtxoSwapQuery) Select(fields ...string) *UtxoSwapSelect {
	usq.ctx.Fields = append(usq.ctx.Fields, fields...)
	sbuild := &UtxoSwapSelect{UtxoSwapQuery: usq}
	sbuild.label = utxoswap.Label
	sbuild.flds, sbuild.scan = &usq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a UtxoSwapSelect configured with the given aggregations.
func (usq *UtxoSwapQuery) Aggregate(fns ...AggregateFunc) *UtxoSwapSelect {
	return usq.Select().Aggregate(fns...)
}

func (usq *UtxoSwapQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range usq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, usq); err != nil {
				return err
			}
		}
	}
	for _, f := range usq.ctx.Fields {
		if !utxoswap.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if usq.path != nil {
		prev, err := usq.path(ctx)
		if err != nil {
			return err
		}
		usq.sql = prev
	}
	return nil
}

func (usq *UtxoSwapQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*UtxoSwap, error) {
	var (
		nodes       = []*UtxoSwap{}
		withFKs     = usq.withFKs
		_spec       = usq.querySpec()
		loadedTypes = [2]bool{
			usq.withUtxo != nil,
			usq.withTransfer != nil,
		}
	)
	if usq.withUtxo != nil || usq.withTransfer != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, utxoswap.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*UtxoSwap).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &UtxoSwap{config: usq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(usq.modifiers) > 0 {
		_spec.Modifiers = usq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, usq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := usq.withUtxo; query != nil {
		if err := usq.loadUtxo(ctx, query, nodes, nil,
			func(n *UtxoSwap, e *Utxo) { n.Edges.Utxo = e }); err != nil {
			return nil, err
		}
	}
	if query := usq.withTransfer; query != nil {
		if err := usq.loadTransfer(ctx, query, nodes, nil,
			func(n *UtxoSwap, e *Transfer) { n.Edges.Transfer = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (usq *UtxoSwapQuery) loadUtxo(ctx context.Context, query *UtxoQuery, nodes []*UtxoSwap, init func(*UtxoSwap), assign func(*UtxoSwap, *Utxo)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*UtxoSwap)
	for i := range nodes {
		if nodes[i].utxo_swap_utxo == nil {
			continue
		}
		fk := *nodes[i].utxo_swap_utxo
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(utxo.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "utxo_swap_utxo" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (usq *UtxoSwapQuery) loadTransfer(ctx context.Context, query *TransferQuery, nodes []*UtxoSwap, init func(*UtxoSwap), assign func(*UtxoSwap, *Transfer)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*UtxoSwap)
	for i := range nodes {
		if nodes[i].utxo_swap_transfer == nil {
			continue
		}
		fk := *nodes[i].utxo_swap_transfer
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(transfer.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "utxo_swap_transfer" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (usq *UtxoSwapQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := usq.querySpec()
	if len(usq.modifiers) > 0 {
		_spec.Modifiers = usq.modifiers
	}
	_spec.Node.Columns = usq.ctx.Fields
	if len(usq.ctx.Fields) > 0 {
		_spec.Unique = usq.ctx.Unique != nil && *usq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, usq.driver, _spec)
}

func (usq *UtxoSwapQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(utxoswap.Table, utxoswap.Columns, sqlgraph.NewFieldSpec(utxoswap.FieldID, field.TypeUUID))
	_spec.From = usq.sql
	if unique := usq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if usq.path != nil {
		_spec.Unique = true
	}
	if fields := usq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, utxoswap.FieldID)
		for i := range fields {
			if fields[i] != utxoswap.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := usq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := usq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := usq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := usq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (usq *UtxoSwapQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(usq.driver.Dialect())
	t1 := builder.Table(utxoswap.Table)
	columns := usq.ctx.Fields
	if len(columns) == 0 {
		columns = utxoswap.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if usq.sql != nil {
		selector = usq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if usq.ctx.Unique != nil && *usq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range usq.modifiers {
		m(selector)
	}
	for _, p := range usq.predicates {
		p(selector)
	}
	for _, p := range usq.order {
		p(selector)
	}
	if offset := usq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := usq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ForUpdate locks the selected rows against concurrent updates, and prevent them from being
// updated, deleted or "selected ... for update" by other sessions, until the transaction is
// either committed or rolled-back.
func (usq *UtxoSwapQuery) ForUpdate(opts ...sql.LockOption) *UtxoSwapQuery {
	if usq.driver.Dialect() == dialect.Postgres {
		usq.Unique(false)
	}
	usq.modifiers = append(usq.modifiers, func(s *sql.Selector) {
		s.ForUpdate(opts...)
	})
	return usq
}

// ForShare behaves similarly to ForUpdate, except that it acquires a shared mode lock
// on any rows that are read. Other sessions can read the rows, but cannot modify them
// until your transaction commits.
func (usq *UtxoSwapQuery) ForShare(opts ...sql.LockOption) *UtxoSwapQuery {
	if usq.driver.Dialect() == dialect.Postgres {
		usq.Unique(false)
	}
	usq.modifiers = append(usq.modifiers, func(s *sql.Selector) {
		s.ForShare(opts...)
	})
	return usq
}

// UtxoSwapGroupBy is the group-by builder for UtxoSwap entities.
type UtxoSwapGroupBy struct {
	selector
	build *UtxoSwapQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (usgb *UtxoSwapGroupBy) Aggregate(fns ...AggregateFunc) *UtxoSwapGroupBy {
	usgb.fns = append(usgb.fns, fns...)
	return usgb
}

// Scan applies the selector query and scans the result into the given value.
func (usgb *UtxoSwapGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, usgb.build.ctx, ent.OpQueryGroupBy)
	if err := usgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UtxoSwapQuery, *UtxoSwapGroupBy](ctx, usgb.build, usgb, usgb.build.inters, v)
}

func (usgb *UtxoSwapGroupBy) sqlScan(ctx context.Context, root *UtxoSwapQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(usgb.fns))
	for _, fn := range usgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*usgb.flds)+len(usgb.fns))
		for _, f := range *usgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*usgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := usgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// UtxoSwapSelect is the builder for selecting fields of UtxoSwap entities.
type UtxoSwapSelect struct {
	*UtxoSwapQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (uss *UtxoSwapSelect) Aggregate(fns ...AggregateFunc) *UtxoSwapSelect {
	uss.fns = append(uss.fns, fns...)
	return uss
}

// Scan applies the selector query and scans the result into the given value.
func (uss *UtxoSwapSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, uss.ctx, ent.OpQuerySelect)
	if err := uss.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UtxoSwapQuery, *UtxoSwapSelect](ctx, uss.UtxoSwapQuery, uss, uss.inters, v)
}

func (uss *UtxoSwapSelect) sqlScan(ctx context.Context, root *UtxoSwapQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(uss.fns))
	for _, fn := range uss.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*uss.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := uss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
