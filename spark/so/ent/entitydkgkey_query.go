// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/lightsparkdev/spark/so/ent/entitydkgkey"
	"github.com/lightsparkdev/spark/so/ent/predicate"
	"github.com/lightsparkdev/spark/so/ent/signingkeyshare"
)

// EntityDkgKeyQuery is the builder for querying EntityDkgKey entities.
type EntityDkgKeyQuery struct {
	config
	ctx                 *QueryContext
	order               []entitydkgkey.OrderOption
	inters              []Interceptor
	predicates          []predicate.EntityDkgKey
	withSigningKeyshare *SigningKeyshareQuery
	withFKs             bool
	modifiers           []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the EntityDkgKeyQuery builder.
func (edkq *EntityDkgKeyQuery) Where(ps ...predicate.EntityDkgKey) *EntityDkgKeyQuery {
	edkq.predicates = append(edkq.predicates, ps...)
	return edkq
}

// Limit the number of records to be returned by this query.
func (edkq *EntityDkgKeyQuery) Limit(limit int) *EntityDkgKeyQuery {
	edkq.ctx.Limit = &limit
	return edkq
}

// Offset to start from.
func (edkq *EntityDkgKeyQuery) Offset(offset int) *EntityDkgKeyQuery {
	edkq.ctx.Offset = &offset
	return edkq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (edkq *EntityDkgKeyQuery) Unique(unique bool) *EntityDkgKeyQuery {
	edkq.ctx.Unique = &unique
	return edkq
}

// Order specifies how the records should be ordered.
func (edkq *EntityDkgKeyQuery) Order(o ...entitydkgkey.OrderOption) *EntityDkgKeyQuery {
	edkq.order = append(edkq.order, o...)
	return edkq
}

// QuerySigningKeyshare chains the current query on the "signing_keyshare" edge.
func (edkq *EntityDkgKeyQuery) QuerySigningKeyshare() *SigningKeyshareQuery {
	query := (&SigningKeyshareClient{config: edkq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := edkq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := edkq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(entitydkgkey.Table, entitydkgkey.FieldID, selector),
			sqlgraph.To(signingkeyshare.Table, signingkeyshare.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, entitydkgkey.SigningKeyshareTable, entitydkgkey.SigningKeyshareColumn),
		)
		fromU = sqlgraph.SetNeighbors(edkq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first EntityDkgKey entity from the query.
// Returns a *NotFoundError when no EntityDkgKey was found.
func (edkq *EntityDkgKeyQuery) First(ctx context.Context) (*EntityDkgKey, error) {
	nodes, err := edkq.Limit(1).All(setContextOp(ctx, edkq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{entitydkgkey.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (edkq *EntityDkgKeyQuery) FirstX(ctx context.Context) *EntityDkgKey {
	node, err := edkq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first EntityDkgKey ID from the query.
// Returns a *NotFoundError when no EntityDkgKey ID was found.
func (edkq *EntityDkgKeyQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = edkq.Limit(1).IDs(setContextOp(ctx, edkq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{entitydkgkey.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (edkq *EntityDkgKeyQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := edkq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single EntityDkgKey entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one EntityDkgKey entity is found.
// Returns a *NotFoundError when no EntityDkgKey entities are found.
func (edkq *EntityDkgKeyQuery) Only(ctx context.Context) (*EntityDkgKey, error) {
	nodes, err := edkq.Limit(2).All(setContextOp(ctx, edkq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{entitydkgkey.Label}
	default:
		return nil, &NotSingularError{entitydkgkey.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (edkq *EntityDkgKeyQuery) OnlyX(ctx context.Context) *EntityDkgKey {
	node, err := edkq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only EntityDkgKey ID in the query.
// Returns a *NotSingularError when more than one EntityDkgKey ID is found.
// Returns a *NotFoundError when no entities are found.
func (edkq *EntityDkgKeyQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = edkq.Limit(2).IDs(setContextOp(ctx, edkq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{entitydkgkey.Label}
	default:
		err = &NotSingularError{entitydkgkey.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (edkq *EntityDkgKeyQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := edkq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of EntityDkgKeys.
func (edkq *EntityDkgKeyQuery) All(ctx context.Context) ([]*EntityDkgKey, error) {
	ctx = setContextOp(ctx, edkq.ctx, ent.OpQueryAll)
	if err := edkq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*EntityDkgKey, *EntityDkgKeyQuery]()
	return withInterceptors[[]*EntityDkgKey](ctx, edkq, qr, edkq.inters)
}

// AllX is like All, but panics if an error occurs.
func (edkq *EntityDkgKeyQuery) AllX(ctx context.Context) []*EntityDkgKey {
	nodes, err := edkq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of EntityDkgKey IDs.
func (edkq *EntityDkgKeyQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if edkq.ctx.Unique == nil && edkq.path != nil {
		edkq.Unique(true)
	}
	ctx = setContextOp(ctx, edkq.ctx, ent.OpQueryIDs)
	if err = edkq.Select(entitydkgkey.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (edkq *EntityDkgKeyQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := edkq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (edkq *EntityDkgKeyQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, edkq.ctx, ent.OpQueryCount)
	if err := edkq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, edkq, querierCount[*EntityDkgKeyQuery](), edkq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (edkq *EntityDkgKeyQuery) CountX(ctx context.Context) int {
	count, err := edkq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (edkq *EntityDkgKeyQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, edkq.ctx, ent.OpQueryExist)
	switch _, err := edkq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (edkq *EntityDkgKeyQuery) ExistX(ctx context.Context) bool {
	exist, err := edkq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the EntityDkgKeyQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (edkq *EntityDkgKeyQuery) Clone() *EntityDkgKeyQuery {
	if edkq == nil {
		return nil
	}
	return &EntityDkgKeyQuery{
		config:              edkq.config,
		ctx:                 edkq.ctx.Clone(),
		order:               append([]entitydkgkey.OrderOption{}, edkq.order...),
		inters:              append([]Interceptor{}, edkq.inters...),
		predicates:          append([]predicate.EntityDkgKey{}, edkq.predicates...),
		withSigningKeyshare: edkq.withSigningKeyshare.Clone(),
		// clone intermediate query.
		sql:  edkq.sql.Clone(),
		path: edkq.path,
	}
}

// WithSigningKeyshare tells the query-builder to eager-load the nodes that are connected to
// the "signing_keyshare" edge. The optional arguments are used to configure the query builder of the edge.
func (edkq *EntityDkgKeyQuery) WithSigningKeyshare(opts ...func(*SigningKeyshareQuery)) *EntityDkgKeyQuery {
	query := (&SigningKeyshareClient{config: edkq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	edkq.withSigningKeyshare = query
	return edkq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.EntityDkgKey.Query().
//		GroupBy(entitydkgkey.FieldCreateTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (edkq *EntityDkgKeyQuery) GroupBy(field string, fields ...string) *EntityDkgKeyGroupBy {
	edkq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &EntityDkgKeyGroupBy{build: edkq}
	grbuild.flds = &edkq.ctx.Fields
	grbuild.label = entitydkgkey.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.EntityDkgKey.Query().
//		Select(entitydkgkey.FieldCreateTime).
//		Scan(ctx, &v)
func (edkq *EntityDkgKeyQuery) Select(fields ...string) *EntityDkgKeySelect {
	edkq.ctx.Fields = append(edkq.ctx.Fields, fields...)
	sbuild := &EntityDkgKeySelect{EntityDkgKeyQuery: edkq}
	sbuild.label = entitydkgkey.Label
	sbuild.flds, sbuild.scan = &edkq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a EntityDkgKeySelect configured with the given aggregations.
func (edkq *EntityDkgKeyQuery) Aggregate(fns ...AggregateFunc) *EntityDkgKeySelect {
	return edkq.Select().Aggregate(fns...)
}

func (edkq *EntityDkgKeyQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range edkq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, edkq); err != nil {
				return err
			}
		}
	}
	for _, f := range edkq.ctx.Fields {
		if !entitydkgkey.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if edkq.path != nil {
		prev, err := edkq.path(ctx)
		if err != nil {
			return err
		}
		edkq.sql = prev
	}
	return nil
}

func (edkq *EntityDkgKeyQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*EntityDkgKey, error) {
	var (
		nodes       = []*EntityDkgKey{}
		withFKs     = edkq.withFKs
		_spec       = edkq.querySpec()
		loadedTypes = [1]bool{
			edkq.withSigningKeyshare != nil,
		}
	)
	if edkq.withSigningKeyshare != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, entitydkgkey.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*EntityDkgKey).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &EntityDkgKey{config: edkq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(edkq.modifiers) > 0 {
		_spec.Modifiers = edkq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, edkq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := edkq.withSigningKeyshare; query != nil {
		if err := edkq.loadSigningKeyshare(ctx, query, nodes, nil,
			func(n *EntityDkgKey, e *SigningKeyshare) { n.Edges.SigningKeyshare = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (edkq *EntityDkgKeyQuery) loadSigningKeyshare(ctx context.Context, query *SigningKeyshareQuery, nodes []*EntityDkgKey, init func(*EntityDkgKey), assign func(*EntityDkgKey, *SigningKeyshare)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*EntityDkgKey)
	for i := range nodes {
		if nodes[i].entity_dkg_key_signing_keyshare == nil {
			continue
		}
		fk := *nodes[i].entity_dkg_key_signing_keyshare
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(signingkeyshare.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "entity_dkg_key_signing_keyshare" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (edkq *EntityDkgKeyQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := edkq.querySpec()
	if len(edkq.modifiers) > 0 {
		_spec.Modifiers = edkq.modifiers
	}
	_spec.Node.Columns = edkq.ctx.Fields
	if len(edkq.ctx.Fields) > 0 {
		_spec.Unique = edkq.ctx.Unique != nil && *edkq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, edkq.driver, _spec)
}

func (edkq *EntityDkgKeyQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(entitydkgkey.Table, entitydkgkey.Columns, sqlgraph.NewFieldSpec(entitydkgkey.FieldID, field.TypeUUID))
	_spec.From = edkq.sql
	if unique := edkq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if edkq.path != nil {
		_spec.Unique = true
	}
	if fields := edkq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, entitydkgkey.FieldID)
		for i := range fields {
			if fields[i] != entitydkgkey.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := edkq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := edkq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := edkq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := edkq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (edkq *EntityDkgKeyQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(edkq.driver.Dialect())
	t1 := builder.Table(entitydkgkey.Table)
	columns := edkq.ctx.Fields
	if len(columns) == 0 {
		columns = entitydkgkey.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if edkq.sql != nil {
		selector = edkq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if edkq.ctx.Unique != nil && *edkq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range edkq.modifiers {
		m(selector)
	}
	for _, p := range edkq.predicates {
		p(selector)
	}
	for _, p := range edkq.order {
		p(selector)
	}
	if offset := edkq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := edkq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ForUpdate locks the selected rows against concurrent updates, and prevent them from being
// updated, deleted or "selected ... for update" by other sessions, until the transaction is
// either committed or rolled-back.
func (edkq *EntityDkgKeyQuery) ForUpdate(opts ...sql.LockOption) *EntityDkgKeyQuery {
	if edkq.driver.Dialect() == dialect.Postgres {
		edkq.Unique(false)
	}
	edkq.modifiers = append(edkq.modifiers, func(s *sql.Selector) {
		s.ForUpdate(opts...)
	})
	return edkq
}

// ForShare behaves similarly to ForUpdate, except that it acquires a shared mode lock
// on any rows that are read. Other sessions can read the rows, but cannot modify them
// until your transaction commits.
func (edkq *EntityDkgKeyQuery) ForShare(opts ...sql.LockOption) *EntityDkgKeyQuery {
	if edkq.driver.Dialect() == dialect.Postgres {
		edkq.Unique(false)
	}
	edkq.modifiers = append(edkq.modifiers, func(s *sql.Selector) {
		s.ForShare(opts...)
	})
	return edkq
}

// EntityDkgKeyGroupBy is the group-by builder for EntityDkgKey entities.
type EntityDkgKeyGroupBy struct {
	selector
	build *EntityDkgKeyQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (edkgb *EntityDkgKeyGroupBy) Aggregate(fns ...AggregateFunc) *EntityDkgKeyGroupBy {
	edkgb.fns = append(edkgb.fns, fns...)
	return edkgb
}

// Scan applies the selector query and scans the result into the given value.
func (edkgb *EntityDkgKeyGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, edkgb.build.ctx, ent.OpQueryGroupBy)
	if err := edkgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*EntityDkgKeyQuery, *EntityDkgKeyGroupBy](ctx, edkgb.build, edkgb, edkgb.build.inters, v)
}

func (edkgb *EntityDkgKeyGroupBy) sqlScan(ctx context.Context, root *EntityDkgKeyQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(edkgb.fns))
	for _, fn := range edkgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*edkgb.flds)+len(edkgb.fns))
		for _, f := range *edkgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*edkgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := edkgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// EntityDkgKeySelect is the builder for selecting fields of EntityDkgKey entities.
type EntityDkgKeySelect struct {
	*EntityDkgKeyQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (edks *EntityDkgKeySelect) Aggregate(fns ...AggregateFunc) *EntityDkgKeySelect {
	edks.fns = append(edks.fns, fns...)
	return edks
}

// Scan applies the selector query and scans the result into the given value.
func (edks *EntityDkgKeySelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, edks.ctx, ent.OpQuerySelect)
	if err := edks.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*EntityDkgKeyQuery, *EntityDkgKeySelect](ctx, edks.EntityDkgKeyQuery, edks, edks.inters, v)
}

func (edks *EntityDkgKeySelect) sqlScan(ctx context.Context, root *EntityDkgKeyQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(edks.fns))
	for _, fn := range edks.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*edks.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := edks.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
