// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/lightsparkdev/spark/so/ent/predicate"
	"github.com/lightsparkdev/spark/so/ent/tokentransaction"
	"github.com/lightsparkdev/spark/so/ent/tokentransactionpeersignature"
)

// TokenTransactionPeerSignatureQuery is the builder for querying TokenTransactionPeerSignature entities.
type TokenTransactionPeerSignatureQuery struct {
	config
	ctx                  *QueryContext
	order                []tokentransactionpeersignature.OrderOption
	inters               []Interceptor
	predicates           []predicate.TokenTransactionPeerSignature
	withTokenTransaction *TokenTransactionQuery
	withFKs              bool
	modifiers            []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the TokenTransactionPeerSignatureQuery builder.
func (ttpsq *TokenTransactionPeerSignatureQuery) Where(ps ...predicate.TokenTransactionPeerSignature) *TokenTransactionPeerSignatureQuery {
	ttpsq.predicates = append(ttpsq.predicates, ps...)
	return ttpsq
}

// Limit the number of records to be returned by this query.
func (ttpsq *TokenTransactionPeerSignatureQuery) Limit(limit int) *TokenTransactionPeerSignatureQuery {
	ttpsq.ctx.Limit = &limit
	return ttpsq
}

// Offset to start from.
func (ttpsq *TokenTransactionPeerSignatureQuery) Offset(offset int) *TokenTransactionPeerSignatureQuery {
	ttpsq.ctx.Offset = &offset
	return ttpsq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ttpsq *TokenTransactionPeerSignatureQuery) Unique(unique bool) *TokenTransactionPeerSignatureQuery {
	ttpsq.ctx.Unique = &unique
	return ttpsq
}

// Order specifies how the records should be ordered.
func (ttpsq *TokenTransactionPeerSignatureQuery) Order(o ...tokentransactionpeersignature.OrderOption) *TokenTransactionPeerSignatureQuery {
	ttpsq.order = append(ttpsq.order, o...)
	return ttpsq
}

// QueryTokenTransaction chains the current query on the "token_transaction" edge.
func (ttpsq *TokenTransactionPeerSignatureQuery) QueryTokenTransaction() *TokenTransactionQuery {
	query := (&TokenTransactionClient{config: ttpsq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ttpsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ttpsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tokentransactionpeersignature.Table, tokentransactionpeersignature.FieldID, selector),
			sqlgraph.To(tokentransaction.Table, tokentransaction.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, tokentransactionpeersignature.TokenTransactionTable, tokentransactionpeersignature.TokenTransactionColumn),
		)
		fromU = sqlgraph.SetNeighbors(ttpsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first TokenTransactionPeerSignature entity from the query.
// Returns a *NotFoundError when no TokenTransactionPeerSignature was found.
func (ttpsq *TokenTransactionPeerSignatureQuery) First(ctx context.Context) (*TokenTransactionPeerSignature, error) {
	nodes, err := ttpsq.Limit(1).All(setContextOp(ctx, ttpsq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{tokentransactionpeersignature.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ttpsq *TokenTransactionPeerSignatureQuery) FirstX(ctx context.Context) *TokenTransactionPeerSignature {
	node, err := ttpsq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first TokenTransactionPeerSignature ID from the query.
// Returns a *NotFoundError when no TokenTransactionPeerSignature ID was found.
func (ttpsq *TokenTransactionPeerSignatureQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = ttpsq.Limit(1).IDs(setContextOp(ctx, ttpsq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{tokentransactionpeersignature.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ttpsq *TokenTransactionPeerSignatureQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := ttpsq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single TokenTransactionPeerSignature entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one TokenTransactionPeerSignature entity is found.
// Returns a *NotFoundError when no TokenTransactionPeerSignature entities are found.
func (ttpsq *TokenTransactionPeerSignatureQuery) Only(ctx context.Context) (*TokenTransactionPeerSignature, error) {
	nodes, err := ttpsq.Limit(2).All(setContextOp(ctx, ttpsq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{tokentransactionpeersignature.Label}
	default:
		return nil, &NotSingularError{tokentransactionpeersignature.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ttpsq *TokenTransactionPeerSignatureQuery) OnlyX(ctx context.Context) *TokenTransactionPeerSignature {
	node, err := ttpsq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only TokenTransactionPeerSignature ID in the query.
// Returns a *NotSingularError when more than one TokenTransactionPeerSignature ID is found.
// Returns a *NotFoundError when no entities are found.
func (ttpsq *TokenTransactionPeerSignatureQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = ttpsq.Limit(2).IDs(setContextOp(ctx, ttpsq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{tokentransactionpeersignature.Label}
	default:
		err = &NotSingularError{tokentransactionpeersignature.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ttpsq *TokenTransactionPeerSignatureQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := ttpsq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of TokenTransactionPeerSignatures.
func (ttpsq *TokenTransactionPeerSignatureQuery) All(ctx context.Context) ([]*TokenTransactionPeerSignature, error) {
	ctx = setContextOp(ctx, ttpsq.ctx, ent.OpQueryAll)
	if err := ttpsq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*TokenTransactionPeerSignature, *TokenTransactionPeerSignatureQuery]()
	return withInterceptors[[]*TokenTransactionPeerSignature](ctx, ttpsq, qr, ttpsq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ttpsq *TokenTransactionPeerSignatureQuery) AllX(ctx context.Context) []*TokenTransactionPeerSignature {
	nodes, err := ttpsq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of TokenTransactionPeerSignature IDs.
func (ttpsq *TokenTransactionPeerSignatureQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if ttpsq.ctx.Unique == nil && ttpsq.path != nil {
		ttpsq.Unique(true)
	}
	ctx = setContextOp(ctx, ttpsq.ctx, ent.OpQueryIDs)
	if err = ttpsq.Select(tokentransactionpeersignature.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ttpsq *TokenTransactionPeerSignatureQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := ttpsq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ttpsq *TokenTransactionPeerSignatureQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ttpsq.ctx, ent.OpQueryCount)
	if err := ttpsq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ttpsq, querierCount[*TokenTransactionPeerSignatureQuery](), ttpsq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ttpsq *TokenTransactionPeerSignatureQuery) CountX(ctx context.Context) int {
	count, err := ttpsq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ttpsq *TokenTransactionPeerSignatureQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ttpsq.ctx, ent.OpQueryExist)
	switch _, err := ttpsq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ttpsq *TokenTransactionPeerSignatureQuery) ExistX(ctx context.Context) bool {
	exist, err := ttpsq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the TokenTransactionPeerSignatureQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ttpsq *TokenTransactionPeerSignatureQuery) Clone() *TokenTransactionPeerSignatureQuery {
	if ttpsq == nil {
		return nil
	}
	return &TokenTransactionPeerSignatureQuery{
		config:               ttpsq.config,
		ctx:                  ttpsq.ctx.Clone(),
		order:                append([]tokentransactionpeersignature.OrderOption{}, ttpsq.order...),
		inters:               append([]Interceptor{}, ttpsq.inters...),
		predicates:           append([]predicate.TokenTransactionPeerSignature{}, ttpsq.predicates...),
		withTokenTransaction: ttpsq.withTokenTransaction.Clone(),
		// clone intermediate query.
		sql:  ttpsq.sql.Clone(),
		path: ttpsq.path,
	}
}

// WithTokenTransaction tells the query-builder to eager-load the nodes that are connected to
// the "token_transaction" edge. The optional arguments are used to configure the query builder of the edge.
func (ttpsq *TokenTransactionPeerSignatureQuery) WithTokenTransaction(opts ...func(*TokenTransactionQuery)) *TokenTransactionPeerSignatureQuery {
	query := (&TokenTransactionClient{config: ttpsq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ttpsq.withTokenTransaction = query
	return ttpsq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.TokenTransactionPeerSignature.Query().
//		GroupBy(tokentransactionpeersignature.FieldCreateTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ttpsq *TokenTransactionPeerSignatureQuery) GroupBy(field string, fields ...string) *TokenTransactionPeerSignatureGroupBy {
	ttpsq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &TokenTransactionPeerSignatureGroupBy{build: ttpsq}
	grbuild.flds = &ttpsq.ctx.Fields
	grbuild.label = tokentransactionpeersignature.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.TokenTransactionPeerSignature.Query().
//		Select(tokentransactionpeersignature.FieldCreateTime).
//		Scan(ctx, &v)
func (ttpsq *TokenTransactionPeerSignatureQuery) Select(fields ...string) *TokenTransactionPeerSignatureSelect {
	ttpsq.ctx.Fields = append(ttpsq.ctx.Fields, fields...)
	sbuild := &TokenTransactionPeerSignatureSelect{TokenTransactionPeerSignatureQuery: ttpsq}
	sbuild.label = tokentransactionpeersignature.Label
	sbuild.flds, sbuild.scan = &ttpsq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a TokenTransactionPeerSignatureSelect configured with the given aggregations.
func (ttpsq *TokenTransactionPeerSignatureQuery) Aggregate(fns ...AggregateFunc) *TokenTransactionPeerSignatureSelect {
	return ttpsq.Select().Aggregate(fns...)
}

func (ttpsq *TokenTransactionPeerSignatureQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ttpsq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ttpsq); err != nil {
				return err
			}
		}
	}
	for _, f := range ttpsq.ctx.Fields {
		if !tokentransactionpeersignature.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ttpsq.path != nil {
		prev, err := ttpsq.path(ctx)
		if err != nil {
			return err
		}
		ttpsq.sql = prev
	}
	return nil
}

func (ttpsq *TokenTransactionPeerSignatureQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*TokenTransactionPeerSignature, error) {
	var (
		nodes       = []*TokenTransactionPeerSignature{}
		withFKs     = ttpsq.withFKs
		_spec       = ttpsq.querySpec()
		loadedTypes = [1]bool{
			ttpsq.withTokenTransaction != nil,
		}
	)
	if ttpsq.withTokenTransaction != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, tokentransactionpeersignature.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*TokenTransactionPeerSignature).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &TokenTransactionPeerSignature{config: ttpsq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(ttpsq.modifiers) > 0 {
		_spec.Modifiers = ttpsq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ttpsq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ttpsq.withTokenTransaction; query != nil {
		if err := ttpsq.loadTokenTransaction(ctx, query, nodes, nil,
			func(n *TokenTransactionPeerSignature, e *TokenTransaction) { n.Edges.TokenTransaction = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ttpsq *TokenTransactionPeerSignatureQuery) loadTokenTransaction(ctx context.Context, query *TokenTransactionQuery, nodes []*TokenTransactionPeerSignature, init func(*TokenTransactionPeerSignature), assign func(*TokenTransactionPeerSignature, *TokenTransaction)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*TokenTransactionPeerSignature)
	for i := range nodes {
		if nodes[i].token_transaction_peer_signatures == nil {
			continue
		}
		fk := *nodes[i].token_transaction_peer_signatures
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(tokentransaction.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "token_transaction_peer_signatures" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (ttpsq *TokenTransactionPeerSignatureQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ttpsq.querySpec()
	if len(ttpsq.modifiers) > 0 {
		_spec.Modifiers = ttpsq.modifiers
	}
	_spec.Node.Columns = ttpsq.ctx.Fields
	if len(ttpsq.ctx.Fields) > 0 {
		_spec.Unique = ttpsq.ctx.Unique != nil && *ttpsq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, ttpsq.driver, _spec)
}

func (ttpsq *TokenTransactionPeerSignatureQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(tokentransactionpeersignature.Table, tokentransactionpeersignature.Columns, sqlgraph.NewFieldSpec(tokentransactionpeersignature.FieldID, field.TypeUUID))
	_spec.From = ttpsq.sql
	if unique := ttpsq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ttpsq.path != nil {
		_spec.Unique = true
	}
	if fields := ttpsq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tokentransactionpeersignature.FieldID)
		for i := range fields {
			if fields[i] != tokentransactionpeersignature.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := ttpsq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ttpsq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ttpsq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ttpsq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ttpsq *TokenTransactionPeerSignatureQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ttpsq.driver.Dialect())
	t1 := builder.Table(tokentransactionpeersignature.Table)
	columns := ttpsq.ctx.Fields
	if len(columns) == 0 {
		columns = tokentransactionpeersignature.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ttpsq.sql != nil {
		selector = ttpsq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ttpsq.ctx.Unique != nil && *ttpsq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range ttpsq.modifiers {
		m(selector)
	}
	for _, p := range ttpsq.predicates {
		p(selector)
	}
	for _, p := range ttpsq.order {
		p(selector)
	}
	if offset := ttpsq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ttpsq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ForUpdate locks the selected rows against concurrent updates, and prevent them from being
// updated, deleted or "selected ... for update" by other sessions, until the transaction is
// either committed or rolled-back.
func (ttpsq *TokenTransactionPeerSignatureQuery) ForUpdate(opts ...sql.LockOption) *TokenTransactionPeerSignatureQuery {
	if ttpsq.driver.Dialect() == dialect.Postgres {
		ttpsq.Unique(false)
	}
	ttpsq.modifiers = append(ttpsq.modifiers, func(s *sql.Selector) {
		s.ForUpdate(opts...)
	})
	return ttpsq
}

// ForShare behaves similarly to ForUpdate, except that it acquires a shared mode lock
// on any rows that are read. Other sessions can read the rows, but cannot modify them
// until your transaction commits.
func (ttpsq *TokenTransactionPeerSignatureQuery) ForShare(opts ...sql.LockOption) *TokenTransactionPeerSignatureQuery {
	if ttpsq.driver.Dialect() == dialect.Postgres {
		ttpsq.Unique(false)
	}
	ttpsq.modifiers = append(ttpsq.modifiers, func(s *sql.Selector) {
		s.ForShare(opts...)
	})
	return ttpsq
}

// TokenTransactionPeerSignatureGroupBy is the group-by builder for TokenTransactionPeerSignature entities.
type TokenTransactionPeerSignatureGroupBy struct {
	selector
	build *TokenTransactionPeerSignatureQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ttpsgb *TokenTransactionPeerSignatureGroupBy) Aggregate(fns ...AggregateFunc) *TokenTransactionPeerSignatureGroupBy {
	ttpsgb.fns = append(ttpsgb.fns, fns...)
	return ttpsgb
}

// Scan applies the selector query and scans the result into the given value.
func (ttpsgb *TokenTransactionPeerSignatureGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ttpsgb.build.ctx, ent.OpQueryGroupBy)
	if err := ttpsgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TokenTransactionPeerSignatureQuery, *TokenTransactionPeerSignatureGroupBy](ctx, ttpsgb.build, ttpsgb, ttpsgb.build.inters, v)
}

func (ttpsgb *TokenTransactionPeerSignatureGroupBy) sqlScan(ctx context.Context, root *TokenTransactionPeerSignatureQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ttpsgb.fns))
	for _, fn := range ttpsgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ttpsgb.flds)+len(ttpsgb.fns))
		for _, f := range *ttpsgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ttpsgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ttpsgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// TokenTransactionPeerSignatureSelect is the builder for selecting fields of TokenTransactionPeerSignature entities.
type TokenTransactionPeerSignatureSelect struct {
	*TokenTransactionPeerSignatureQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ttpss *TokenTransactionPeerSignatureSelect) Aggregate(fns ...AggregateFunc) *TokenTransactionPeerSignatureSelect {
	ttpss.fns = append(ttpss.fns, fns...)
	return ttpss
}

// Scan applies the selector query and scans the result into the given value.
func (ttpss *TokenTransactionPeerSignatureSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ttpss.ctx, ent.OpQuerySelect)
	if err := ttpss.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TokenTransactionPeerSignatureQuery, *TokenTransactionPeerSignatureSelect](ctx, ttpss.TokenTransactionPeerSignatureQuery, ttpss, ttpss.inters, v)
}

func (ttpss *TokenTransactionPeerSignatureSelect) sqlScan(ctx context.Context, root *TokenTransactionPeerSignatureQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ttpss.fns))
	for _, fn := range ttpss.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ttpss.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ttpss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
