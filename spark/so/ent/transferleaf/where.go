// Code generated by ent, DO NOT EDIT.

package transferleaf

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/lightsparkdev/spark/so/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldEQ(FieldUpdateTime, v))
}

// SecretCipher applies equality check predicate on the "secret_cipher" field. It's identical to SecretCipherEQ.
func SecretCipher(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldEQ(FieldSecretCipher, v))
}

// Signature applies equality check predicate on the "signature" field. It's identical to SignatureEQ.
func Signature(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldEQ(FieldSignature, v))
}

// PreviousRefundTx applies equality check predicate on the "previous_refund_tx" field. It's identical to PreviousRefundTxEQ.
func PreviousRefundTx(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldEQ(FieldPreviousRefundTx, v))
}

// PreviousDirectRefundTx applies equality check predicate on the "previous_direct_refund_tx" field. It's identical to PreviousDirectRefundTxEQ.
func PreviousDirectRefundTx(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldEQ(FieldPreviousDirectRefundTx, v))
}

// PreviousDirectFromCpfpRefundTx applies equality check predicate on the "previous_direct_from_cpfp_refund_tx" field. It's identical to PreviousDirectFromCpfpRefundTxEQ.
func PreviousDirectFromCpfpRefundTx(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldEQ(FieldPreviousDirectFromCpfpRefundTx, v))
}

// IntermediateRefundTx applies equality check predicate on the "intermediate_refund_tx" field. It's identical to IntermediateRefundTxEQ.
func IntermediateRefundTx(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldEQ(FieldIntermediateRefundTx, v))
}

// IntermediateDirectRefundTx applies equality check predicate on the "intermediate_direct_refund_tx" field. It's identical to IntermediateDirectRefundTxEQ.
func IntermediateDirectRefundTx(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldEQ(FieldIntermediateDirectRefundTx, v))
}

// IntermediateDirectFromCpfpRefundTx applies equality check predicate on the "intermediate_direct_from_cpfp_refund_tx" field. It's identical to IntermediateDirectFromCpfpRefundTxEQ.
func IntermediateDirectFromCpfpRefundTx(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldEQ(FieldIntermediateDirectFromCpfpRefundTx, v))
}

// KeyTweak applies equality check predicate on the "key_tweak" field. It's identical to KeyTweakEQ.
func KeyTweak(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldEQ(FieldKeyTweak, v))
}

// SenderKeyTweakProof applies equality check predicate on the "sender_key_tweak_proof" field. It's identical to SenderKeyTweakProofEQ.
func SenderKeyTweakProof(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldEQ(FieldSenderKeyTweakProof, v))
}

// ReceiverKeyTweak applies equality check predicate on the "receiver_key_tweak" field. It's identical to ReceiverKeyTweakEQ.
func ReceiverKeyTweak(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldEQ(FieldReceiverKeyTweak, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldLTE(FieldUpdateTime, v))
}

// SecretCipherEQ applies the EQ predicate on the "secret_cipher" field.
func SecretCipherEQ(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldEQ(FieldSecretCipher, v))
}

// SecretCipherNEQ applies the NEQ predicate on the "secret_cipher" field.
func SecretCipherNEQ(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldNEQ(FieldSecretCipher, v))
}

// SecretCipherIn applies the In predicate on the "secret_cipher" field.
func SecretCipherIn(vs ...[]byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldIn(FieldSecretCipher, vs...))
}

// SecretCipherNotIn applies the NotIn predicate on the "secret_cipher" field.
func SecretCipherNotIn(vs ...[]byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldNotIn(FieldSecretCipher, vs...))
}

// SecretCipherGT applies the GT predicate on the "secret_cipher" field.
func SecretCipherGT(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldGT(FieldSecretCipher, v))
}

// SecretCipherGTE applies the GTE predicate on the "secret_cipher" field.
func SecretCipherGTE(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldGTE(FieldSecretCipher, v))
}

// SecretCipherLT applies the LT predicate on the "secret_cipher" field.
func SecretCipherLT(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldLT(FieldSecretCipher, v))
}

// SecretCipherLTE applies the LTE predicate on the "secret_cipher" field.
func SecretCipherLTE(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldLTE(FieldSecretCipher, v))
}

// SecretCipherIsNil applies the IsNil predicate on the "secret_cipher" field.
func SecretCipherIsNil() predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldIsNull(FieldSecretCipher))
}

// SecretCipherNotNil applies the NotNil predicate on the "secret_cipher" field.
func SecretCipherNotNil() predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldNotNull(FieldSecretCipher))
}

// SignatureEQ applies the EQ predicate on the "signature" field.
func SignatureEQ(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldEQ(FieldSignature, v))
}

// SignatureNEQ applies the NEQ predicate on the "signature" field.
func SignatureNEQ(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldNEQ(FieldSignature, v))
}

// SignatureIn applies the In predicate on the "signature" field.
func SignatureIn(vs ...[]byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldIn(FieldSignature, vs...))
}

// SignatureNotIn applies the NotIn predicate on the "signature" field.
func SignatureNotIn(vs ...[]byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldNotIn(FieldSignature, vs...))
}

// SignatureGT applies the GT predicate on the "signature" field.
func SignatureGT(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldGT(FieldSignature, v))
}

// SignatureGTE applies the GTE predicate on the "signature" field.
func SignatureGTE(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldGTE(FieldSignature, v))
}

// SignatureLT applies the LT predicate on the "signature" field.
func SignatureLT(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldLT(FieldSignature, v))
}

// SignatureLTE applies the LTE predicate on the "signature" field.
func SignatureLTE(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldLTE(FieldSignature, v))
}

// SignatureIsNil applies the IsNil predicate on the "signature" field.
func SignatureIsNil() predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldIsNull(FieldSignature))
}

// SignatureNotNil applies the NotNil predicate on the "signature" field.
func SignatureNotNil() predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldNotNull(FieldSignature))
}

// PreviousRefundTxEQ applies the EQ predicate on the "previous_refund_tx" field.
func PreviousRefundTxEQ(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldEQ(FieldPreviousRefundTx, v))
}

// PreviousRefundTxNEQ applies the NEQ predicate on the "previous_refund_tx" field.
func PreviousRefundTxNEQ(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldNEQ(FieldPreviousRefundTx, v))
}

// PreviousRefundTxIn applies the In predicate on the "previous_refund_tx" field.
func PreviousRefundTxIn(vs ...[]byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldIn(FieldPreviousRefundTx, vs...))
}

// PreviousRefundTxNotIn applies the NotIn predicate on the "previous_refund_tx" field.
func PreviousRefundTxNotIn(vs ...[]byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldNotIn(FieldPreviousRefundTx, vs...))
}

// PreviousRefundTxGT applies the GT predicate on the "previous_refund_tx" field.
func PreviousRefundTxGT(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldGT(FieldPreviousRefundTx, v))
}

// PreviousRefundTxGTE applies the GTE predicate on the "previous_refund_tx" field.
func PreviousRefundTxGTE(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldGTE(FieldPreviousRefundTx, v))
}

// PreviousRefundTxLT applies the LT predicate on the "previous_refund_tx" field.
func PreviousRefundTxLT(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldLT(FieldPreviousRefundTx, v))
}

// PreviousRefundTxLTE applies the LTE predicate on the "previous_refund_tx" field.
func PreviousRefundTxLTE(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldLTE(FieldPreviousRefundTx, v))
}

// PreviousDirectRefundTxEQ applies the EQ predicate on the "previous_direct_refund_tx" field.
func PreviousDirectRefundTxEQ(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldEQ(FieldPreviousDirectRefundTx, v))
}

// PreviousDirectRefundTxNEQ applies the NEQ predicate on the "previous_direct_refund_tx" field.
func PreviousDirectRefundTxNEQ(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldNEQ(FieldPreviousDirectRefundTx, v))
}

// PreviousDirectRefundTxIn applies the In predicate on the "previous_direct_refund_tx" field.
func PreviousDirectRefundTxIn(vs ...[]byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldIn(FieldPreviousDirectRefundTx, vs...))
}

// PreviousDirectRefundTxNotIn applies the NotIn predicate on the "previous_direct_refund_tx" field.
func PreviousDirectRefundTxNotIn(vs ...[]byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldNotIn(FieldPreviousDirectRefundTx, vs...))
}

// PreviousDirectRefundTxGT applies the GT predicate on the "previous_direct_refund_tx" field.
func PreviousDirectRefundTxGT(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldGT(FieldPreviousDirectRefundTx, v))
}

// PreviousDirectRefundTxGTE applies the GTE predicate on the "previous_direct_refund_tx" field.
func PreviousDirectRefundTxGTE(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldGTE(FieldPreviousDirectRefundTx, v))
}

// PreviousDirectRefundTxLT applies the LT predicate on the "previous_direct_refund_tx" field.
func PreviousDirectRefundTxLT(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldLT(FieldPreviousDirectRefundTx, v))
}

// PreviousDirectRefundTxLTE applies the LTE predicate on the "previous_direct_refund_tx" field.
func PreviousDirectRefundTxLTE(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldLTE(FieldPreviousDirectRefundTx, v))
}

// PreviousDirectRefundTxIsNil applies the IsNil predicate on the "previous_direct_refund_tx" field.
func PreviousDirectRefundTxIsNil() predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldIsNull(FieldPreviousDirectRefundTx))
}

// PreviousDirectRefundTxNotNil applies the NotNil predicate on the "previous_direct_refund_tx" field.
func PreviousDirectRefundTxNotNil() predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldNotNull(FieldPreviousDirectRefundTx))
}

// PreviousDirectFromCpfpRefundTxEQ applies the EQ predicate on the "previous_direct_from_cpfp_refund_tx" field.
func PreviousDirectFromCpfpRefundTxEQ(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldEQ(FieldPreviousDirectFromCpfpRefundTx, v))
}

// PreviousDirectFromCpfpRefundTxNEQ applies the NEQ predicate on the "previous_direct_from_cpfp_refund_tx" field.
func PreviousDirectFromCpfpRefundTxNEQ(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldNEQ(FieldPreviousDirectFromCpfpRefundTx, v))
}

// PreviousDirectFromCpfpRefundTxIn applies the In predicate on the "previous_direct_from_cpfp_refund_tx" field.
func PreviousDirectFromCpfpRefundTxIn(vs ...[]byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldIn(FieldPreviousDirectFromCpfpRefundTx, vs...))
}

// PreviousDirectFromCpfpRefundTxNotIn applies the NotIn predicate on the "previous_direct_from_cpfp_refund_tx" field.
func PreviousDirectFromCpfpRefundTxNotIn(vs ...[]byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldNotIn(FieldPreviousDirectFromCpfpRefundTx, vs...))
}

// PreviousDirectFromCpfpRefundTxGT applies the GT predicate on the "previous_direct_from_cpfp_refund_tx" field.
func PreviousDirectFromCpfpRefundTxGT(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldGT(FieldPreviousDirectFromCpfpRefundTx, v))
}

// PreviousDirectFromCpfpRefundTxGTE applies the GTE predicate on the "previous_direct_from_cpfp_refund_tx" field.
func PreviousDirectFromCpfpRefundTxGTE(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldGTE(FieldPreviousDirectFromCpfpRefundTx, v))
}

// PreviousDirectFromCpfpRefundTxLT applies the LT predicate on the "previous_direct_from_cpfp_refund_tx" field.
func PreviousDirectFromCpfpRefundTxLT(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldLT(FieldPreviousDirectFromCpfpRefundTx, v))
}

// PreviousDirectFromCpfpRefundTxLTE applies the LTE predicate on the "previous_direct_from_cpfp_refund_tx" field.
func PreviousDirectFromCpfpRefundTxLTE(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldLTE(FieldPreviousDirectFromCpfpRefundTx, v))
}

// PreviousDirectFromCpfpRefundTxIsNil applies the IsNil predicate on the "previous_direct_from_cpfp_refund_tx" field.
func PreviousDirectFromCpfpRefundTxIsNil() predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldIsNull(FieldPreviousDirectFromCpfpRefundTx))
}

// PreviousDirectFromCpfpRefundTxNotNil applies the NotNil predicate on the "previous_direct_from_cpfp_refund_tx" field.
func PreviousDirectFromCpfpRefundTxNotNil() predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldNotNull(FieldPreviousDirectFromCpfpRefundTx))
}

// IntermediateRefundTxEQ applies the EQ predicate on the "intermediate_refund_tx" field.
func IntermediateRefundTxEQ(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldEQ(FieldIntermediateRefundTx, v))
}

// IntermediateRefundTxNEQ applies the NEQ predicate on the "intermediate_refund_tx" field.
func IntermediateRefundTxNEQ(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldNEQ(FieldIntermediateRefundTx, v))
}

// IntermediateRefundTxIn applies the In predicate on the "intermediate_refund_tx" field.
func IntermediateRefundTxIn(vs ...[]byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldIn(FieldIntermediateRefundTx, vs...))
}

// IntermediateRefundTxNotIn applies the NotIn predicate on the "intermediate_refund_tx" field.
func IntermediateRefundTxNotIn(vs ...[]byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldNotIn(FieldIntermediateRefundTx, vs...))
}

// IntermediateRefundTxGT applies the GT predicate on the "intermediate_refund_tx" field.
func IntermediateRefundTxGT(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldGT(FieldIntermediateRefundTx, v))
}

// IntermediateRefundTxGTE applies the GTE predicate on the "intermediate_refund_tx" field.
func IntermediateRefundTxGTE(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldGTE(FieldIntermediateRefundTx, v))
}

// IntermediateRefundTxLT applies the LT predicate on the "intermediate_refund_tx" field.
func IntermediateRefundTxLT(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldLT(FieldIntermediateRefundTx, v))
}

// IntermediateRefundTxLTE applies the LTE predicate on the "intermediate_refund_tx" field.
func IntermediateRefundTxLTE(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldLTE(FieldIntermediateRefundTx, v))
}

// IntermediateDirectRefundTxEQ applies the EQ predicate on the "intermediate_direct_refund_tx" field.
func IntermediateDirectRefundTxEQ(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldEQ(FieldIntermediateDirectRefundTx, v))
}

// IntermediateDirectRefundTxNEQ applies the NEQ predicate on the "intermediate_direct_refund_tx" field.
func IntermediateDirectRefundTxNEQ(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldNEQ(FieldIntermediateDirectRefundTx, v))
}

// IntermediateDirectRefundTxIn applies the In predicate on the "intermediate_direct_refund_tx" field.
func IntermediateDirectRefundTxIn(vs ...[]byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldIn(FieldIntermediateDirectRefundTx, vs...))
}

// IntermediateDirectRefundTxNotIn applies the NotIn predicate on the "intermediate_direct_refund_tx" field.
func IntermediateDirectRefundTxNotIn(vs ...[]byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldNotIn(FieldIntermediateDirectRefundTx, vs...))
}

// IntermediateDirectRefundTxGT applies the GT predicate on the "intermediate_direct_refund_tx" field.
func IntermediateDirectRefundTxGT(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldGT(FieldIntermediateDirectRefundTx, v))
}

// IntermediateDirectRefundTxGTE applies the GTE predicate on the "intermediate_direct_refund_tx" field.
func IntermediateDirectRefundTxGTE(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldGTE(FieldIntermediateDirectRefundTx, v))
}

// IntermediateDirectRefundTxLT applies the LT predicate on the "intermediate_direct_refund_tx" field.
func IntermediateDirectRefundTxLT(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldLT(FieldIntermediateDirectRefundTx, v))
}

// IntermediateDirectRefundTxLTE applies the LTE predicate on the "intermediate_direct_refund_tx" field.
func IntermediateDirectRefundTxLTE(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldLTE(FieldIntermediateDirectRefundTx, v))
}

// IntermediateDirectRefundTxIsNil applies the IsNil predicate on the "intermediate_direct_refund_tx" field.
func IntermediateDirectRefundTxIsNil() predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldIsNull(FieldIntermediateDirectRefundTx))
}

// IntermediateDirectRefundTxNotNil applies the NotNil predicate on the "intermediate_direct_refund_tx" field.
func IntermediateDirectRefundTxNotNil() predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldNotNull(FieldIntermediateDirectRefundTx))
}

// IntermediateDirectFromCpfpRefundTxEQ applies the EQ predicate on the "intermediate_direct_from_cpfp_refund_tx" field.
func IntermediateDirectFromCpfpRefundTxEQ(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldEQ(FieldIntermediateDirectFromCpfpRefundTx, v))
}

// IntermediateDirectFromCpfpRefundTxNEQ applies the NEQ predicate on the "intermediate_direct_from_cpfp_refund_tx" field.
func IntermediateDirectFromCpfpRefundTxNEQ(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldNEQ(FieldIntermediateDirectFromCpfpRefundTx, v))
}

// IntermediateDirectFromCpfpRefundTxIn applies the In predicate on the "intermediate_direct_from_cpfp_refund_tx" field.
func IntermediateDirectFromCpfpRefundTxIn(vs ...[]byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldIn(FieldIntermediateDirectFromCpfpRefundTx, vs...))
}

// IntermediateDirectFromCpfpRefundTxNotIn applies the NotIn predicate on the "intermediate_direct_from_cpfp_refund_tx" field.
func IntermediateDirectFromCpfpRefundTxNotIn(vs ...[]byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldNotIn(FieldIntermediateDirectFromCpfpRefundTx, vs...))
}

// IntermediateDirectFromCpfpRefundTxGT applies the GT predicate on the "intermediate_direct_from_cpfp_refund_tx" field.
func IntermediateDirectFromCpfpRefundTxGT(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldGT(FieldIntermediateDirectFromCpfpRefundTx, v))
}

// IntermediateDirectFromCpfpRefundTxGTE applies the GTE predicate on the "intermediate_direct_from_cpfp_refund_tx" field.
func IntermediateDirectFromCpfpRefundTxGTE(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldGTE(FieldIntermediateDirectFromCpfpRefundTx, v))
}

// IntermediateDirectFromCpfpRefundTxLT applies the LT predicate on the "intermediate_direct_from_cpfp_refund_tx" field.
func IntermediateDirectFromCpfpRefundTxLT(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldLT(FieldIntermediateDirectFromCpfpRefundTx, v))
}

// IntermediateDirectFromCpfpRefundTxLTE applies the LTE predicate on the "intermediate_direct_from_cpfp_refund_tx" field.
func IntermediateDirectFromCpfpRefundTxLTE(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldLTE(FieldIntermediateDirectFromCpfpRefundTx, v))
}

// IntermediateDirectFromCpfpRefundTxIsNil applies the IsNil predicate on the "intermediate_direct_from_cpfp_refund_tx" field.
func IntermediateDirectFromCpfpRefundTxIsNil() predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldIsNull(FieldIntermediateDirectFromCpfpRefundTx))
}

// IntermediateDirectFromCpfpRefundTxNotNil applies the NotNil predicate on the "intermediate_direct_from_cpfp_refund_tx" field.
func IntermediateDirectFromCpfpRefundTxNotNil() predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldNotNull(FieldIntermediateDirectFromCpfpRefundTx))
}

// KeyTweakEQ applies the EQ predicate on the "key_tweak" field.
func KeyTweakEQ(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldEQ(FieldKeyTweak, v))
}

// KeyTweakNEQ applies the NEQ predicate on the "key_tweak" field.
func KeyTweakNEQ(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldNEQ(FieldKeyTweak, v))
}

// KeyTweakIn applies the In predicate on the "key_tweak" field.
func KeyTweakIn(vs ...[]byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldIn(FieldKeyTweak, vs...))
}

// KeyTweakNotIn applies the NotIn predicate on the "key_tweak" field.
func KeyTweakNotIn(vs ...[]byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldNotIn(FieldKeyTweak, vs...))
}

// KeyTweakGT applies the GT predicate on the "key_tweak" field.
func KeyTweakGT(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldGT(FieldKeyTweak, v))
}

// KeyTweakGTE applies the GTE predicate on the "key_tweak" field.
func KeyTweakGTE(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldGTE(FieldKeyTweak, v))
}

// KeyTweakLT applies the LT predicate on the "key_tweak" field.
func KeyTweakLT(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldLT(FieldKeyTweak, v))
}

// KeyTweakLTE applies the LTE predicate on the "key_tweak" field.
func KeyTweakLTE(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldLTE(FieldKeyTweak, v))
}

// KeyTweakIsNil applies the IsNil predicate on the "key_tweak" field.
func KeyTweakIsNil() predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldIsNull(FieldKeyTweak))
}

// KeyTweakNotNil applies the NotNil predicate on the "key_tweak" field.
func KeyTweakNotNil() predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldNotNull(FieldKeyTweak))
}

// SenderKeyTweakProofEQ applies the EQ predicate on the "sender_key_tweak_proof" field.
func SenderKeyTweakProofEQ(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldEQ(FieldSenderKeyTweakProof, v))
}

// SenderKeyTweakProofNEQ applies the NEQ predicate on the "sender_key_tweak_proof" field.
func SenderKeyTweakProofNEQ(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldNEQ(FieldSenderKeyTweakProof, v))
}

// SenderKeyTweakProofIn applies the In predicate on the "sender_key_tweak_proof" field.
func SenderKeyTweakProofIn(vs ...[]byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldIn(FieldSenderKeyTweakProof, vs...))
}

// SenderKeyTweakProofNotIn applies the NotIn predicate on the "sender_key_tweak_proof" field.
func SenderKeyTweakProofNotIn(vs ...[]byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldNotIn(FieldSenderKeyTweakProof, vs...))
}

// SenderKeyTweakProofGT applies the GT predicate on the "sender_key_tweak_proof" field.
func SenderKeyTweakProofGT(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldGT(FieldSenderKeyTweakProof, v))
}

// SenderKeyTweakProofGTE applies the GTE predicate on the "sender_key_tweak_proof" field.
func SenderKeyTweakProofGTE(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldGTE(FieldSenderKeyTweakProof, v))
}

// SenderKeyTweakProofLT applies the LT predicate on the "sender_key_tweak_proof" field.
func SenderKeyTweakProofLT(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldLT(FieldSenderKeyTweakProof, v))
}

// SenderKeyTweakProofLTE applies the LTE predicate on the "sender_key_tweak_proof" field.
func SenderKeyTweakProofLTE(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldLTE(FieldSenderKeyTweakProof, v))
}

// SenderKeyTweakProofIsNil applies the IsNil predicate on the "sender_key_tweak_proof" field.
func SenderKeyTweakProofIsNil() predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldIsNull(FieldSenderKeyTweakProof))
}

// SenderKeyTweakProofNotNil applies the NotNil predicate on the "sender_key_tweak_proof" field.
func SenderKeyTweakProofNotNil() predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldNotNull(FieldSenderKeyTweakProof))
}

// ReceiverKeyTweakEQ applies the EQ predicate on the "receiver_key_tweak" field.
func ReceiverKeyTweakEQ(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldEQ(FieldReceiverKeyTweak, v))
}

// ReceiverKeyTweakNEQ applies the NEQ predicate on the "receiver_key_tweak" field.
func ReceiverKeyTweakNEQ(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldNEQ(FieldReceiverKeyTweak, v))
}

// ReceiverKeyTweakIn applies the In predicate on the "receiver_key_tweak" field.
func ReceiverKeyTweakIn(vs ...[]byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldIn(FieldReceiverKeyTweak, vs...))
}

// ReceiverKeyTweakNotIn applies the NotIn predicate on the "receiver_key_tweak" field.
func ReceiverKeyTweakNotIn(vs ...[]byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldNotIn(FieldReceiverKeyTweak, vs...))
}

// ReceiverKeyTweakGT applies the GT predicate on the "receiver_key_tweak" field.
func ReceiverKeyTweakGT(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldGT(FieldReceiverKeyTweak, v))
}

// ReceiverKeyTweakGTE applies the GTE predicate on the "receiver_key_tweak" field.
func ReceiverKeyTweakGTE(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldGTE(FieldReceiverKeyTweak, v))
}

// ReceiverKeyTweakLT applies the LT predicate on the "receiver_key_tweak" field.
func ReceiverKeyTweakLT(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldLT(FieldReceiverKeyTweak, v))
}

// ReceiverKeyTweakLTE applies the LTE predicate on the "receiver_key_tweak" field.
func ReceiverKeyTweakLTE(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldLTE(FieldReceiverKeyTweak, v))
}

// ReceiverKeyTweakIsNil applies the IsNil predicate on the "receiver_key_tweak" field.
func ReceiverKeyTweakIsNil() predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldIsNull(FieldReceiverKeyTweak))
}

// ReceiverKeyTweakNotNil applies the NotNil predicate on the "receiver_key_tweak" field.
func ReceiverKeyTweakNotNil() predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldNotNull(FieldReceiverKeyTweak))
}

// HasTransfer applies the HasEdge predicate on the "transfer" edge.
func HasTransfer() predicate.TransferLeaf {
	return predicate.TransferLeaf(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TransferTable, TransferColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTransferWith applies the HasEdge predicate on the "transfer" edge with a given conditions (other predicates).
func HasTransferWith(preds ...predicate.Transfer) predicate.TransferLeaf {
	return predicate.TransferLeaf(func(s *sql.Selector) {
		step := newTransferStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLeaf applies the HasEdge predicate on the "leaf" edge.
func HasLeaf() predicate.TransferLeaf {
	return predicate.TransferLeaf(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, LeafTable, LeafColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLeafWith applies the HasEdge predicate on the "leaf" edge with a given conditions (other predicates).
func HasLeafWith(preds ...predicate.TreeNode) predicate.TransferLeaf {
	return predicate.TransferLeaf(func(s *sql.Selector) {
		step := newLeafStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TransferLeaf) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TransferLeaf) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TransferLeaf) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.NotPredicates(p))
}
