// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/lightsparkdev/spark/so/ent/blockheight"
	"github.com/lightsparkdev/spark/so/ent/predicate"
)

// BlockHeightDelete is the builder for deleting a BlockHeight entity.
type BlockHeightDelete struct {
	config
	hooks    []Hook
	mutation *BlockHeightMutation
}

// Where appends a list predicates to the BlockHeightDelete builder.
func (bhd *BlockHeightDelete) Where(ps ...predicate.BlockHeight) *BlockHeightDelete {
	bhd.mutation.Where(ps...)
	return bhd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (bhd *BlockHeightDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, bhd.sqlExec, bhd.mutation, bhd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (bhd *BlockHeightDelete) ExecX(ctx context.Context) int {
	n, err := bhd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (bhd *BlockHeightDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(blockheight.Table, sqlgraph.NewFieldSpec(blockheight.FieldID, field.TypeUUID))
	if ps := bhd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, bhd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	bhd.mutation.done = true
	return affected, err
}

// BlockHeightDeleteOne is the builder for deleting a single BlockHeight entity.
type BlockHeightDeleteOne struct {
	bhd *BlockHeightDelete
}

// Where appends a list predicates to the BlockHeightDelete builder.
func (bhdo *BlockHeightDeleteOne) Where(ps ...predicate.BlockHeight) *BlockHeightDeleteOne {
	bhdo.bhd.mutation.Where(ps...)
	return bhdo
}

// Exec executes the deletion query.
func (bhdo *BlockHeightDeleteOne) Exec(ctx context.Context) error {
	n, err := bhdo.bhd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{blockheight.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (bhdo *BlockHeightDeleteOne) ExecX(ctx context.Context) {
	if err := bhdo.Exec(ctx); err != nil {
		panic(err)
	}
}
