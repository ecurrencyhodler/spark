// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/lightsparkdev/spark/so/ent/schema/schematype"
	"github.com/lightsparkdev/spark/so/ent/signingcommitment"
)

// SigningCommitment is the model entity for the SigningCommitment schema.
type SigningCommitment struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// OperatorIndex holds the value of the "operator_index" field.
	OperatorIndex uint `json:"operator_index,omitempty"`
	// Status holds the value of the "status" field.
	Status schematype.SigningCommitmentStatus `json:"status,omitempty"`
	// NonceCommitment holds the value of the "nonce_commitment" field.
	NonceCommitment []byte `json:"nonce_commitment,omitempty"`
	selectValues    sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SigningCommitment) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case signingcommitment.FieldNonceCommitment:
			values[i] = new([]byte)
		case signingcommitment.FieldOperatorIndex:
			values[i] = new(sql.NullInt64)
		case signingcommitment.FieldStatus:
			values[i] = new(sql.NullString)
		case signingcommitment.FieldCreateTime, signingcommitment.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case signingcommitment.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SigningCommitment fields.
func (sc *SigningCommitment) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case signingcommitment.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				sc.ID = *value
			}
		case signingcommitment.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				sc.CreateTime = value.Time
			}
		case signingcommitment.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				sc.UpdateTime = value.Time
			}
		case signingcommitment.FieldOperatorIndex:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field operator_index", values[i])
			} else if value.Valid {
				sc.OperatorIndex = uint(value.Int64)
			}
		case signingcommitment.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				sc.Status = schematype.SigningCommitmentStatus(value.String)
			}
		case signingcommitment.FieldNonceCommitment:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field nonce_commitment", values[i])
			} else if value != nil {
				sc.NonceCommitment = *value
			}
		default:
			sc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SigningCommitment.
// This includes values selected through modifiers, order, etc.
func (sc *SigningCommitment) Value(name string) (ent.Value, error) {
	return sc.selectValues.Get(name)
}

// Update returns a builder for updating this SigningCommitment.
// Note that you need to call SigningCommitment.Unwrap() before calling this method if this SigningCommitment
// was returned from a transaction, and the transaction was committed or rolled back.
func (sc *SigningCommitment) Update() *SigningCommitmentUpdateOne {
	return NewSigningCommitmentClient(sc.config).UpdateOne(sc)
}

// Unwrap unwraps the SigningCommitment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sc *SigningCommitment) Unwrap() *SigningCommitment {
	_tx, ok := sc.config.driver.(*txDriver)
	if !ok {
		panic("ent: SigningCommitment is not a transactional entity")
	}
	sc.config.driver = _tx.drv
	return sc
}

// String implements the fmt.Stringer.
func (sc *SigningCommitment) String() string {
	var builder strings.Builder
	builder.WriteString("SigningCommitment(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sc.ID))
	builder.WriteString("create_time=")
	builder.WriteString(sc.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(sc.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("operator_index=")
	builder.WriteString(fmt.Sprintf("%v", sc.OperatorIndex))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", sc.Status))
	builder.WriteString(", ")
	builder.WriteString("nonce_commitment=")
	builder.WriteString(fmt.Sprintf("%v", sc.NonceCommitment))
	builder.WriteByte(')')
	return builder.String()
}

// SigningCommitments is a parsable slice of SigningCommitment.
type SigningCommitments []*SigningCommitment
