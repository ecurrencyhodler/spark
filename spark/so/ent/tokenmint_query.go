// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/lightsparkdev/spark/so/ent/predicate"
	"github.com/lightsparkdev/spark/so/ent/tokenmint"
	"github.com/lightsparkdev/spark/so/ent/tokentransaction"
)

// TokenMintQuery is the builder for querying TokenMint entities.
type TokenMintQuery struct {
	config
	ctx                  *QueryContext
	order                []tokenmint.OrderOption
	inters               []Interceptor
	predicates           []predicate.TokenMint
	withTokenTransaction *TokenTransactionQuery
	modifiers            []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the TokenMintQuery builder.
func (tmq *TokenMintQuery) Where(ps ...predicate.TokenMint) *TokenMintQuery {
	tmq.predicates = append(tmq.predicates, ps...)
	return tmq
}

// Limit the number of records to be returned by this query.
func (tmq *TokenMintQuery) Limit(limit int) *TokenMintQuery {
	tmq.ctx.Limit = &limit
	return tmq
}

// Offset to start from.
func (tmq *TokenMintQuery) Offset(offset int) *TokenMintQuery {
	tmq.ctx.Offset = &offset
	return tmq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (tmq *TokenMintQuery) Unique(unique bool) *TokenMintQuery {
	tmq.ctx.Unique = &unique
	return tmq
}

// Order specifies how the records should be ordered.
func (tmq *TokenMintQuery) Order(o ...tokenmint.OrderOption) *TokenMintQuery {
	tmq.order = append(tmq.order, o...)
	return tmq
}

// QueryTokenTransaction chains the current query on the "token_transaction" edge.
func (tmq *TokenMintQuery) QueryTokenTransaction() *TokenTransactionQuery {
	query := (&TokenTransactionClient{config: tmq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tmq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tokenmint.Table, tokenmint.FieldID, selector),
			sqlgraph.To(tokentransaction.Table, tokentransaction.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, tokenmint.TokenTransactionTable, tokenmint.TokenTransactionColumn),
		)
		fromU = sqlgraph.SetNeighbors(tmq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first TokenMint entity from the query.
// Returns a *NotFoundError when no TokenMint was found.
func (tmq *TokenMintQuery) First(ctx context.Context) (*TokenMint, error) {
	nodes, err := tmq.Limit(1).All(setContextOp(ctx, tmq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{tokenmint.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (tmq *TokenMintQuery) FirstX(ctx context.Context) *TokenMint {
	node, err := tmq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first TokenMint ID from the query.
// Returns a *NotFoundError when no TokenMint ID was found.
func (tmq *TokenMintQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = tmq.Limit(1).IDs(setContextOp(ctx, tmq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{tokenmint.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (tmq *TokenMintQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := tmq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single TokenMint entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one TokenMint entity is found.
// Returns a *NotFoundError when no TokenMint entities are found.
func (tmq *TokenMintQuery) Only(ctx context.Context) (*TokenMint, error) {
	nodes, err := tmq.Limit(2).All(setContextOp(ctx, tmq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{tokenmint.Label}
	default:
		return nil, &NotSingularError{tokenmint.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (tmq *TokenMintQuery) OnlyX(ctx context.Context) *TokenMint {
	node, err := tmq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only TokenMint ID in the query.
// Returns a *NotSingularError when more than one TokenMint ID is found.
// Returns a *NotFoundError when no entities are found.
func (tmq *TokenMintQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = tmq.Limit(2).IDs(setContextOp(ctx, tmq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{tokenmint.Label}
	default:
		err = &NotSingularError{tokenmint.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (tmq *TokenMintQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := tmq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of TokenMints.
func (tmq *TokenMintQuery) All(ctx context.Context) ([]*TokenMint, error) {
	ctx = setContextOp(ctx, tmq.ctx, ent.OpQueryAll)
	if err := tmq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*TokenMint, *TokenMintQuery]()
	return withInterceptors[[]*TokenMint](ctx, tmq, qr, tmq.inters)
}

// AllX is like All, but panics if an error occurs.
func (tmq *TokenMintQuery) AllX(ctx context.Context) []*TokenMint {
	nodes, err := tmq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of TokenMint IDs.
func (tmq *TokenMintQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if tmq.ctx.Unique == nil && tmq.path != nil {
		tmq.Unique(true)
	}
	ctx = setContextOp(ctx, tmq.ctx, ent.OpQueryIDs)
	if err = tmq.Select(tokenmint.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (tmq *TokenMintQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := tmq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (tmq *TokenMintQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, tmq.ctx, ent.OpQueryCount)
	if err := tmq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, tmq, querierCount[*TokenMintQuery](), tmq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (tmq *TokenMintQuery) CountX(ctx context.Context) int {
	count, err := tmq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (tmq *TokenMintQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, tmq.ctx, ent.OpQueryExist)
	switch _, err := tmq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (tmq *TokenMintQuery) ExistX(ctx context.Context) bool {
	exist, err := tmq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the TokenMintQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (tmq *TokenMintQuery) Clone() *TokenMintQuery {
	if tmq == nil {
		return nil
	}
	return &TokenMintQuery{
		config:               tmq.config,
		ctx:                  tmq.ctx.Clone(),
		order:                append([]tokenmint.OrderOption{}, tmq.order...),
		inters:               append([]Interceptor{}, tmq.inters...),
		predicates:           append([]predicate.TokenMint{}, tmq.predicates...),
		withTokenTransaction: tmq.withTokenTransaction.Clone(),
		// clone intermediate query.
		sql:  tmq.sql.Clone(),
		path: tmq.path,
	}
}

// WithTokenTransaction tells the query-builder to eager-load the nodes that are connected to
// the "token_transaction" edge. The optional arguments are used to configure the query builder of the edge.
func (tmq *TokenMintQuery) WithTokenTransaction(opts ...func(*TokenTransactionQuery)) *TokenMintQuery {
	query := (&TokenTransactionClient{config: tmq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tmq.withTokenTransaction = query
	return tmq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.TokenMint.Query().
//		GroupBy(tokenmint.FieldCreateTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (tmq *TokenMintQuery) GroupBy(field string, fields ...string) *TokenMintGroupBy {
	tmq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &TokenMintGroupBy{build: tmq}
	grbuild.flds = &tmq.ctx.Fields
	grbuild.label = tokenmint.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.TokenMint.Query().
//		Select(tokenmint.FieldCreateTime).
//		Scan(ctx, &v)
func (tmq *TokenMintQuery) Select(fields ...string) *TokenMintSelect {
	tmq.ctx.Fields = append(tmq.ctx.Fields, fields...)
	sbuild := &TokenMintSelect{TokenMintQuery: tmq}
	sbuild.label = tokenmint.Label
	sbuild.flds, sbuild.scan = &tmq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a TokenMintSelect configured with the given aggregations.
func (tmq *TokenMintQuery) Aggregate(fns ...AggregateFunc) *TokenMintSelect {
	return tmq.Select().Aggregate(fns...)
}

func (tmq *TokenMintQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range tmq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, tmq); err != nil {
				return err
			}
		}
	}
	for _, f := range tmq.ctx.Fields {
		if !tokenmint.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if tmq.path != nil {
		prev, err := tmq.path(ctx)
		if err != nil {
			return err
		}
		tmq.sql = prev
	}
	return nil
}

func (tmq *TokenMintQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*TokenMint, error) {
	var (
		nodes       = []*TokenMint{}
		_spec       = tmq.querySpec()
		loadedTypes = [1]bool{
			tmq.withTokenTransaction != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*TokenMint).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &TokenMint{config: tmq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(tmq.modifiers) > 0 {
		_spec.Modifiers = tmq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, tmq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := tmq.withTokenTransaction; query != nil {
		if err := tmq.loadTokenTransaction(ctx, query, nodes,
			func(n *TokenMint) { n.Edges.TokenTransaction = []*TokenTransaction{} },
			func(n *TokenMint, e *TokenTransaction) {
				n.Edges.TokenTransaction = append(n.Edges.TokenTransaction, e)
			}); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (tmq *TokenMintQuery) loadTokenTransaction(ctx context.Context, query *TokenTransactionQuery, nodes []*TokenMint, init func(*TokenMint), assign func(*TokenMint, *TokenTransaction)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*TokenMint)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.TokenTransaction(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(tokenmint.TokenTransactionColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.token_transaction_mint
		if fk == nil {
			return fmt.Errorf(`foreign-key "token_transaction_mint" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "token_transaction_mint" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (tmq *TokenMintQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := tmq.querySpec()
	if len(tmq.modifiers) > 0 {
		_spec.Modifiers = tmq.modifiers
	}
	_spec.Node.Columns = tmq.ctx.Fields
	if len(tmq.ctx.Fields) > 0 {
		_spec.Unique = tmq.ctx.Unique != nil && *tmq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, tmq.driver, _spec)
}

func (tmq *TokenMintQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(tokenmint.Table, tokenmint.Columns, sqlgraph.NewFieldSpec(tokenmint.FieldID, field.TypeUUID))
	_spec.From = tmq.sql
	if unique := tmq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if tmq.path != nil {
		_spec.Unique = true
	}
	if fields := tmq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tokenmint.FieldID)
		for i := range fields {
			if fields[i] != tokenmint.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := tmq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := tmq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := tmq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := tmq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (tmq *TokenMintQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(tmq.driver.Dialect())
	t1 := builder.Table(tokenmint.Table)
	columns := tmq.ctx.Fields
	if len(columns) == 0 {
		columns = tokenmint.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if tmq.sql != nil {
		selector = tmq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if tmq.ctx.Unique != nil && *tmq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range tmq.modifiers {
		m(selector)
	}
	for _, p := range tmq.predicates {
		p(selector)
	}
	for _, p := range tmq.order {
		p(selector)
	}
	if offset := tmq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := tmq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ForUpdate locks the selected rows against concurrent updates, and prevent them from being
// updated, deleted or "selected ... for update" by other sessions, until the transaction is
// either committed or rolled-back.
func (tmq *TokenMintQuery) ForUpdate(opts ...sql.LockOption) *TokenMintQuery {
	if tmq.driver.Dialect() == dialect.Postgres {
		tmq.Unique(false)
	}
	tmq.modifiers = append(tmq.modifiers, func(s *sql.Selector) {
		s.ForUpdate(opts...)
	})
	return tmq
}

// ForShare behaves similarly to ForUpdate, except that it acquires a shared mode lock
// on any rows that are read. Other sessions can read the rows, but cannot modify them
// until your transaction commits.
func (tmq *TokenMintQuery) ForShare(opts ...sql.LockOption) *TokenMintQuery {
	if tmq.driver.Dialect() == dialect.Postgres {
		tmq.Unique(false)
	}
	tmq.modifiers = append(tmq.modifiers, func(s *sql.Selector) {
		s.ForShare(opts...)
	})
	return tmq
}

// TokenMintGroupBy is the group-by builder for TokenMint entities.
type TokenMintGroupBy struct {
	selector
	build *TokenMintQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (tmgb *TokenMintGroupBy) Aggregate(fns ...AggregateFunc) *TokenMintGroupBy {
	tmgb.fns = append(tmgb.fns, fns...)
	return tmgb
}

// Scan applies the selector query and scans the result into the given value.
func (tmgb *TokenMintGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, tmgb.build.ctx, ent.OpQueryGroupBy)
	if err := tmgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TokenMintQuery, *TokenMintGroupBy](ctx, tmgb.build, tmgb, tmgb.build.inters, v)
}

func (tmgb *TokenMintGroupBy) sqlScan(ctx context.Context, root *TokenMintQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(tmgb.fns))
	for _, fn := range tmgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*tmgb.flds)+len(tmgb.fns))
		for _, f := range *tmgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*tmgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tmgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// TokenMintSelect is the builder for selecting fields of TokenMint entities.
type TokenMintSelect struct {
	*TokenMintQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (tms *TokenMintSelect) Aggregate(fns ...AggregateFunc) *TokenMintSelect {
	tms.fns = append(tms.fns, fns...)
	return tms
}

// Scan applies the selector query and scans the result into the given value.
func (tms *TokenMintSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, tms.ctx, ent.OpQuerySelect)
	if err := tms.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TokenMintQuery, *TokenMintSelect](ctx, tms.TokenMintQuery, tms, tms.inters, v)
}

func (tms *TokenMintSelect) sqlScan(ctx context.Context, root *TokenMintQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(tms.fns))
	for _, fn := range tms.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*tms.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tms.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
