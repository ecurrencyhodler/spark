// Code generated by ent, DO NOT EDIT.

package paymentintent

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/lightsparkdev/spark/so/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldEQ(FieldUpdateTime, v))
}

// PaymentIntent applies equality check predicate on the "payment_intent" field. It's identical to PaymentIntentEQ.
func PaymentIntent(v string) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldEQ(FieldPaymentIntent, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldLTE(FieldUpdateTime, v))
}

// PaymentIntentEQ applies the EQ predicate on the "payment_intent" field.
func PaymentIntentEQ(v string) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldEQ(FieldPaymentIntent, v))
}

// PaymentIntentNEQ applies the NEQ predicate on the "payment_intent" field.
func PaymentIntentNEQ(v string) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldNEQ(FieldPaymentIntent, v))
}

// PaymentIntentIn applies the In predicate on the "payment_intent" field.
func PaymentIntentIn(vs ...string) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldIn(FieldPaymentIntent, vs...))
}

// PaymentIntentNotIn applies the NotIn predicate on the "payment_intent" field.
func PaymentIntentNotIn(vs ...string) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldNotIn(FieldPaymentIntent, vs...))
}

// PaymentIntentGT applies the GT predicate on the "payment_intent" field.
func PaymentIntentGT(v string) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldGT(FieldPaymentIntent, v))
}

// PaymentIntentGTE applies the GTE predicate on the "payment_intent" field.
func PaymentIntentGTE(v string) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldGTE(FieldPaymentIntent, v))
}

// PaymentIntentLT applies the LT predicate on the "payment_intent" field.
func PaymentIntentLT(v string) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldLT(FieldPaymentIntent, v))
}

// PaymentIntentLTE applies the LTE predicate on the "payment_intent" field.
func PaymentIntentLTE(v string) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldLTE(FieldPaymentIntent, v))
}

// PaymentIntentContains applies the Contains predicate on the "payment_intent" field.
func PaymentIntentContains(v string) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldContains(FieldPaymentIntent, v))
}

// PaymentIntentHasPrefix applies the HasPrefix predicate on the "payment_intent" field.
func PaymentIntentHasPrefix(v string) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldHasPrefix(FieldPaymentIntent, v))
}

// PaymentIntentHasSuffix applies the HasSuffix predicate on the "payment_intent" field.
func PaymentIntentHasSuffix(v string) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldHasSuffix(FieldPaymentIntent, v))
}

// PaymentIntentEqualFold applies the EqualFold predicate on the "payment_intent" field.
func PaymentIntentEqualFold(v string) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldEqualFold(FieldPaymentIntent, v))
}

// PaymentIntentContainsFold applies the ContainsFold predicate on the "payment_intent" field.
func PaymentIntentContainsFold(v string) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldContainsFold(FieldPaymentIntent, v))
}

// HasTransfer applies the HasEdge predicate on the "transfer" edge.
func HasTransfer() predicate.PaymentIntent {
	return predicate.PaymentIntent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, TransferTable, TransferColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTransferWith applies the HasEdge predicate on the "transfer" edge with a given conditions (other predicates).
func HasTransferWith(preds ...predicate.Transfer) predicate.PaymentIntent {
	return predicate.PaymentIntent(func(s *sql.Selector) {
		step := newTransferStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTokenTransaction applies the HasEdge predicate on the "token_transaction" edge.
func HasTokenTransaction() predicate.PaymentIntent {
	return predicate.PaymentIntent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, TokenTransactionTable, TokenTransactionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTokenTransactionWith applies the HasEdge predicate on the "token_transaction" edge with a given conditions (other predicates).
func HasTokenTransactionWith(preds ...predicate.TokenTransaction) predicate.PaymentIntent {
	return predicate.PaymentIntent(func(s *sql.Selector) {
		step := newTokenTransactionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PaymentIntent) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PaymentIntent) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PaymentIntent) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.NotPredicates(p))
}
