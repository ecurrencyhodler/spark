syntax = "proto3";

package frost;

option go_package = "github.com/lightsparkdev/spark/proto/frost";
import "google/protobuf/empty.proto";
import "common.proto";

service FrostService {
    rpc echo(EchoRequest) returns (EchoResponse) {}

    rpc dkg_round1(DkgRound1Request) returns (DkgRound1Response) {}
    rpc dkg_round2(DkgRound2Request) returns (DkgRound2Response) {}
    rpc dkg_round3(DkgRound3Request) returns (DkgRound3Response) {}

    rpc frost_nonce(FrostNonceRequest) returns (FrostNonceResponse) {}
    rpc sign_frost(SignFrostRequest) returns (SignFrostResponse) {}
    rpc aggregate_frost(AggregateFrostRequest) returns (AggregateFrostResponse) {}
    rpc validate_signature_share(ValidateSignatureShareRequest) returns (google.protobuf.Empty) {}
}

message EchoRequest {
    string message = 1;
}

message EchoResponse {
    string message = 1;
}

/*
 * Distributed Key Generation Round 1 Request
 *
 * This request is sent to the server to start the Distributed Key Generation
 * protocol. This will be a batch request, so the server will generate the
 * keys for all participants in the batch.
 *
 */
message DkgRound1Request {
    // An uuid to identify the request.
    string request_id = 1;

    // Identifier of the participant, this will be used as the index of the Shamir secret share. The
    // value should be not be 0. This is a 32-byte hex string.
    string identifier = 2;

    // The maximum number of signers, this is the size of the threshold signature scheme.
    uint64 max_signers = 3;

    // The minimum number of signers, this is the threshold for the threshold signature scheme.
    uint64 min_signers = 4;

    // The number of keys to generate.
    uint64 key_count = 5;
}

/*
 * Distributed Key Generation Round 1 Response
 *
 * This response is sent from the server to the client after the Distributed Key Generation
 * protocol has been completed.
 */
message DkgRound1Response {
    // The packages for the participants. This will be sent to all participants and will be used for
    // the next round.
    repeated bytes round1_packages = 1;
}

/*
 * Distributed Key Generation Round 2 Request
 *
 * This request is sent to the server for the round 2 of DKG protocol.
 * This will be a batch request.
 */
message DkgRound2Request {
    // An uuid to identify the request.
    string request_id = 1;

    // A map of all participants' identifiers to their serialized round1 packages.
    repeated common.PackageMap round1_packages_maps = 2;
}

/*
 * Distributed Key Generation Round 2 Response
 *
 * This response is sent from the server to the client after the Distributed Key Generation
 * protocol has been completed.
 */
message DkgRound2Response {
    // The serialized round2 packages.
    repeated common.PackageMap round2_packages = 1;
}

/*
 * Distributed Key Generation Round 3 Request
 *
 * This request is sent to the server for the round 3 of DKG protocol.
 */
message DkgRound3Request {
    // An uuid to identify the request.
    string request_id = 1;

    // A map of all participants' identifiers to their serialized round1 packages.
    repeated common.PackageMap round1_packages_maps = 2;

    // A map of all participants' identifiers to their serialized round2 packages.
    repeated common.PackageMap round2_packages_maps = 3;
}

/*
 * A key package for frost signing.
 */
message KeyPackage {
    // The identifier of the participant.
    string identifier = 1;

    // The secret share for the participant.
    bytes secret_share = 2;

    // The public shares for each participant.
    map<string, bytes> public_shares = 3;

    // The public key for the group.
    bytes public_key = 4;

    // The minimum number of signers for the threshold signature scheme.
    uint32 min_signers = 5;
}

/*
 * Distributed Key Generation Round 3 Response
 *
 * This response is sent from the server to the client after the Distributed Key Generation
 * protocol has been completed.
 */
message DkgRound3Response {
    // The key packages for the participants.
    repeated KeyPackage key_packages = 1;
}

/*
 * The role of the participant in the signing.
 */
enum SigningRole {
    STATECHAIN = 0;
    USER = 1;
}

/*
 * A nonce for frost signing.
 * It's a pair of private keys in secp256k1 sha256 field.
 */
message SigningNonce {
    // The private key for hiding. 32 bytes.
    bytes hiding = 1;

    // The private key for binding. 32 bytes.
    bytes binding = 2;
}

message FrostNonceRequest {
    // The key packages for the signing, used as entropy for the nonce.
    repeated KeyPackage key_packages = 1;
}

message SigningNonceResult {
    // The nonces for the signing.
    SigningNonce nonces = 1;

    // The commitments for the signing.
    common.SigningCommitment commitments = 2;
}

message FrostNonceResponse {
    repeated SigningNonceResult results = 1;
}

message FrostSigningJob {
    // The unique identifier for the signing job.
    string job_id = 1;

    // The message to sign.
    bytes message = 2;

    // The secret package from DKG round 3.
    KeyPackage key_package = 3;

    // The verifying key. This should be the total public key for both user and StatechainEntity.
    bytes verifying_key = 4;

    // The nonce for current participant.
    SigningNonce nonce = 5;

    // The commitments for all participants of the statechain.
    map<string, common.SigningCommitment> commitments = 6;

    // The commitments for all participants of the user.
    common.SigningCommitment user_commitments = 7;

    // Adaptor public key for adaptor signature
    bytes adaptor_public_key = 8;
}

/*
 * Signing request
 *
 * This request is sent to the server for the signing.
 */
message SignFrostRequest {
    // The signing jobs.
    repeated FrostSigningJob signing_jobs = 1;

    // The role of the participant in the signing.
    SigningRole role = 2;
}

/*
 * Signing response
 *
 * This response is sent from the server to the client after the signing has been completed.
 */
message SignFrostResponse {
    // The signature shares.
    map<string, common.SigningResult> results = 1;
}

/*
 * Aggregate frost request
 *
 * This request is sent to the server for the aggregate signing.
 */
message AggregateFrostRequest {
    // The message to sign.
    bytes message = 1;

    // The signature shares for each participant of the statechain.
    map<string, bytes> signature_shares = 2;

    // The public shares for each participant of the statechain.
    map<string, bytes> public_shares = 3;

    // The verifying key. This should be the total public key for both user and StatechainEntity.
    bytes verifying_key = 4;

    // The commitments for all participants of the statechain.
    map<string, common.SigningCommitment> commitments = 5;

    // The commitments for all participants of the user.
    common.SigningCommitment user_commitments = 6;

    // The user's public key.
    bytes user_public_key = 7;

    // The user's signature share.
    bytes user_signature_share = 8;

    // Adaptor public key for adaptor signature
    bytes adaptor_public_key = 9;
}

/*
 * Aggregate frost response
 *
 * This response is sent from the server to the client after the aggregate signing has been completed.
 */
message AggregateFrostResponse {
    // The signature.
    bytes signature = 1;
}

message ValidateSignatureShareRequest {
    // The identifier of the participant.
    string identifier = 1;

    // The role of the participant in the signing.
    SigningRole role = 2;

    // The message to sign.
    bytes message = 3;

    // The signature share to validate.
    bytes signature_share = 4;

    // The public share for the participant.
    bytes public_share = 5;

    // The verifying key. This should be the total public key for both user and StatechainEntity.
    bytes verifying_key = 6;

    // The commitments for all participants of the statechain.
    map<string, common.SigningCommitment> commitments = 7;

    // The commitments for all participants of the user.
    common.SigningCommitment user_commitments = 8;
}
